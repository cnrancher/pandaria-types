// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockNotificationTemplateListerMockGet  sync.RWMutex
	lockNotificationTemplateListerMockList sync.RWMutex
)

// Ensure, that NotificationTemplateListerMock does implement NotificationTemplateLister.
// If this is not the case, regenerate this file with moq.
var _ v3.NotificationTemplateLister = &NotificationTemplateListerMock{}

// NotificationTemplateListerMock is a mock implementation of NotificationTemplateLister.
//
//     func TestSomethingThatUsesNotificationTemplateLister(t *testing.T) {
//
//         // make and configure a mocked NotificationTemplateLister
//         mockedNotificationTemplateLister := &NotificationTemplateListerMock{
//             GetFunc: func(namespace string, name string) (*v3.NotificationTemplate, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.NotificationTemplate, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedNotificationTemplateLister in code that requires NotificationTemplateLister
//         // and then make assertions.
//
//     }
type NotificationTemplateListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.NotificationTemplate, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.NotificationTemplate, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *NotificationTemplateListerMock) Get(namespace string, name string) (*v3.NotificationTemplate, error) {
	if mock.GetFunc == nil {
		panic("NotificationTemplateListerMock.GetFunc: method is nil but NotificationTemplateLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockNotificationTemplateListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNotificationTemplateListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNotificationTemplateLister.GetCalls())
func (mock *NotificationTemplateListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockNotificationTemplateListerMockGet.RLock()
	calls = mock.calls.Get
	lockNotificationTemplateListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NotificationTemplateListerMock) List(namespace string, selector labels.Selector) ([]*v3.NotificationTemplate, error) {
	if mock.ListFunc == nil {
		panic("NotificationTemplateListerMock.ListFunc: method is nil but NotificationTemplateLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockNotificationTemplateListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNotificationTemplateListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNotificationTemplateLister.ListCalls())
func (mock *NotificationTemplateListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockNotificationTemplateListerMockList.RLock()
	calls = mock.calls.List
	lockNotificationTemplateListerMockList.RUnlock()
	return calls
}

var (
	lockNotificationTemplateControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockNotificationTemplateControllerMockAddClusterScopedHandler        sync.RWMutex
	lockNotificationTemplateControllerMockAddFeatureHandler              sync.RWMutex
	lockNotificationTemplateControllerMockAddHandler                     sync.RWMutex
	lockNotificationTemplateControllerMockEnqueue                        sync.RWMutex
	lockNotificationTemplateControllerMockEnqueueAfter                   sync.RWMutex
	lockNotificationTemplateControllerMockGeneric                        sync.RWMutex
	lockNotificationTemplateControllerMockInformer                       sync.RWMutex
	lockNotificationTemplateControllerMockLister                         sync.RWMutex
	lockNotificationTemplateControllerMockStart                          sync.RWMutex
	lockNotificationTemplateControllerMockSync                           sync.RWMutex
)

// Ensure, that NotificationTemplateControllerMock does implement NotificationTemplateController.
// If this is not the case, regenerate this file with moq.
var _ v3.NotificationTemplateController = &NotificationTemplateControllerMock{}

// NotificationTemplateControllerMock is a mock implementation of NotificationTemplateController.
//
//     func TestSomethingThatUsesNotificationTemplateController(t *testing.T) {
//
//         // make and configure a mocked NotificationTemplateController
//         mockedNotificationTemplateController := &NotificationTemplateControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.NotificationTemplateLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedNotificationTemplateController in code that requires NotificationTemplateController
//         // and then make assertions.
//
//     }
type NotificationTemplateControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.NotificationTemplateHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.NotificationTemplateHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.NotificationTemplateHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.NotificationTemplateHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.NotificationTemplateLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.NotificationTemplateHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.NotificationTemplateHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NotificationTemplateHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.NotificationTemplateHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *NotificationTemplateControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.NotificationTemplateHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("NotificationTemplateControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but NotificationTemplateController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.NotificationTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockNotificationTemplateControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockNotificationTemplateControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedNotificationTemplateController.AddClusterScopedFeatureHandlerCalls())
func (mock *NotificationTemplateControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockNotificationTemplateControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *NotificationTemplateControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.NotificationTemplateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("NotificationTemplateControllerMock.AddClusterScopedHandlerFunc: method is nil but NotificationTemplateController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.NotificationTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockNotificationTemplateControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockNotificationTemplateControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedNotificationTemplateController.AddClusterScopedHandlerCalls())
func (mock *NotificationTemplateControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockNotificationTemplateControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *NotificationTemplateControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.NotificationTemplateHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("NotificationTemplateControllerMock.AddFeatureHandlerFunc: method is nil but NotificationTemplateController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NotificationTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockNotificationTemplateControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockNotificationTemplateControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedNotificationTemplateController.AddFeatureHandlerCalls())
func (mock *NotificationTemplateControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockNotificationTemplateControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *NotificationTemplateControllerMock) AddHandler(ctx context.Context, name string, handler v3.NotificationTemplateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("NotificationTemplateControllerMock.AddHandlerFunc: method is nil but NotificationTemplateController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.NotificationTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockNotificationTemplateControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockNotificationTemplateControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedNotificationTemplateController.AddHandlerCalls())
func (mock *NotificationTemplateControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockNotificationTemplateControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *NotificationTemplateControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("NotificationTemplateControllerMock.EnqueueFunc: method is nil but NotificationTemplateController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockNotificationTemplateControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockNotificationTemplateControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedNotificationTemplateController.EnqueueCalls())
func (mock *NotificationTemplateControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockNotificationTemplateControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockNotificationTemplateControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *NotificationTemplateControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("NotificationTemplateControllerMock.EnqueueAfterFunc: method is nil but NotificationTemplateController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockNotificationTemplateControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockNotificationTemplateControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedNotificationTemplateController.EnqueueAfterCalls())
func (mock *NotificationTemplateControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockNotificationTemplateControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockNotificationTemplateControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *NotificationTemplateControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("NotificationTemplateControllerMock.GenericFunc: method is nil but NotificationTemplateController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockNotificationTemplateControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockNotificationTemplateControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedNotificationTemplateController.GenericCalls())
func (mock *NotificationTemplateControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockNotificationTemplateControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockNotificationTemplateControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *NotificationTemplateControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("NotificationTemplateControllerMock.InformerFunc: method is nil but NotificationTemplateController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockNotificationTemplateControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockNotificationTemplateControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedNotificationTemplateController.InformerCalls())
func (mock *NotificationTemplateControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockNotificationTemplateControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockNotificationTemplateControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *NotificationTemplateControllerMock) Lister() v3.NotificationTemplateLister {
	if mock.ListerFunc == nil {
		panic("NotificationTemplateControllerMock.ListerFunc: method is nil but NotificationTemplateController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockNotificationTemplateControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockNotificationTemplateControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedNotificationTemplateController.ListerCalls())
func (mock *NotificationTemplateControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockNotificationTemplateControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockNotificationTemplateControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *NotificationTemplateControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("NotificationTemplateControllerMock.StartFunc: method is nil but NotificationTemplateController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockNotificationTemplateControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockNotificationTemplateControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedNotificationTemplateController.StartCalls())
func (mock *NotificationTemplateControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockNotificationTemplateControllerMockStart.RLock()
	calls = mock.calls.Start
	lockNotificationTemplateControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *NotificationTemplateControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("NotificationTemplateControllerMock.SyncFunc: method is nil but NotificationTemplateController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockNotificationTemplateControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockNotificationTemplateControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedNotificationTemplateController.SyncCalls())
func (mock *NotificationTemplateControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockNotificationTemplateControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockNotificationTemplateControllerMockSync.RUnlock()
	return calls
}

var (
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockNotificationTemplateInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockNotificationTemplateInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockNotificationTemplateInterfaceMockAddFeatureHandler                sync.RWMutex
	lockNotificationTemplateInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockNotificationTemplateInterfaceMockAddHandler                       sync.RWMutex
	lockNotificationTemplateInterfaceMockAddLifecycle                     sync.RWMutex
	lockNotificationTemplateInterfaceMockController                       sync.RWMutex
	lockNotificationTemplateInterfaceMockCreate                           sync.RWMutex
	lockNotificationTemplateInterfaceMockDelete                           sync.RWMutex
	lockNotificationTemplateInterfaceMockDeleteCollection                 sync.RWMutex
	lockNotificationTemplateInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockNotificationTemplateInterfaceMockGet                              sync.RWMutex
	lockNotificationTemplateInterfaceMockGetNamespaced                    sync.RWMutex
	lockNotificationTemplateInterfaceMockList                             sync.RWMutex
	lockNotificationTemplateInterfaceMockListNamespaced                   sync.RWMutex
	lockNotificationTemplateInterfaceMockObjectClient                     sync.RWMutex
	lockNotificationTemplateInterfaceMockUpdate                           sync.RWMutex
	lockNotificationTemplateInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that NotificationTemplateInterfaceMock does implement NotificationTemplateInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.NotificationTemplateInterface = &NotificationTemplateInterfaceMock{}

// NotificationTemplateInterfaceMock is a mock implementation of NotificationTemplateInterface.
//
//     func TestSomethingThatUsesNotificationTemplateInterface(t *testing.T) {
//
//         // make and configure a mocked NotificationTemplateInterface
//         mockedNotificationTemplateInterface := &NotificationTemplateInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.NotificationTemplateLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.NotificationTemplateLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.NotificationTemplateLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.NotificationTemplateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.NotificationTemplateLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.NotificationTemplateController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.NotificationTemplate) (*v3.NotificationTemplate, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.NotificationTemplate, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.NotificationTemplate, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.NotificationTemplateList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1.ListOptions) (*v3.NotificationTemplateList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.NotificationTemplate) (*v3.NotificationTemplate, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedNotificationTemplateInterface in code that requires NotificationTemplateInterface
//         // and then make assertions.
//
//     }
type NotificationTemplateInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.NotificationTemplateHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.NotificationTemplateLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.NotificationTemplateHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.NotificationTemplateLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.NotificationTemplateHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.NotificationTemplateLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.NotificationTemplateHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.NotificationTemplateLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.NotificationTemplateController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.NotificationTemplate) (*v3.NotificationTemplate, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.NotificationTemplate, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.NotificationTemplate, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.NotificationTemplateList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1.ListOptions) (*v3.NotificationTemplateList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.NotificationTemplate) (*v3.NotificationTemplate, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.NotificationTemplateHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotificationTemplateLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.NotificationTemplateHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotificationTemplateLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NotificationTemplateHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotificationTemplateLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.NotificationTemplateHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.NotificationTemplateLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.NotificationTemplate
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.NotificationTemplate
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.NotificationTemplateHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but NotificationTemplateInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.NotificationTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.NotificationTemplateLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but NotificationTemplateInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.NotificationTemplateLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.NotificationTemplateLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.NotificationTemplateLifecycle
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockNotificationTemplateInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.NotificationTemplateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddClusterScopedHandlerFunc: method is nil but NotificationTemplateInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.NotificationTemplateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockNotificationTemplateInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddClusterScopedHandlerCalls())
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockNotificationTemplateInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.NotificationTemplateLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but NotificationTemplateInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.NotificationTemplateLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockNotificationTemplateInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddClusterScopedLifecycleCalls())
func (mock *NotificationTemplateInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.NotificationTemplateLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.NotificationTemplateLifecycle
	}
	lockNotificationTemplateInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockNotificationTemplateInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *NotificationTemplateInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.NotificationTemplateHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddFeatureHandlerFunc: method is nil but NotificationTemplateInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NotificationTemplateHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockNotificationTemplateInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockNotificationTemplateInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddFeatureHandlerCalls())
func (mock *NotificationTemplateInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockNotificationTemplateInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *NotificationTemplateInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.NotificationTemplateLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddFeatureLifecycleFunc: method is nil but NotificationTemplateInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.NotificationTemplateLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockNotificationTemplateInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockNotificationTemplateInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddFeatureLifecycleCalls())
func (mock *NotificationTemplateInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.NotificationTemplateLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.NotificationTemplateLifecycle
	}
	lockNotificationTemplateInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockNotificationTemplateInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *NotificationTemplateInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.NotificationTemplateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddHandlerFunc: method is nil but NotificationTemplateInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.NotificationTemplateHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockNotificationTemplateInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockNotificationTemplateInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddHandlerCalls())
func (mock *NotificationTemplateInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.NotificationTemplateHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.NotificationTemplateHandlerFunc
	}
	lockNotificationTemplateInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockNotificationTemplateInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *NotificationTemplateInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.NotificationTemplateLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("NotificationTemplateInterfaceMock.AddLifecycleFunc: method is nil but NotificationTemplateInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.NotificationTemplateLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockNotificationTemplateInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockNotificationTemplateInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedNotificationTemplateInterface.AddLifecycleCalls())
func (mock *NotificationTemplateInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.NotificationTemplateLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.NotificationTemplateLifecycle
	}
	lockNotificationTemplateInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockNotificationTemplateInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *NotificationTemplateInterfaceMock) Controller() v3.NotificationTemplateController {
	if mock.ControllerFunc == nil {
		panic("NotificationTemplateInterfaceMock.ControllerFunc: method is nil but NotificationTemplateInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockNotificationTemplateInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockNotificationTemplateInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedNotificationTemplateInterface.ControllerCalls())
func (mock *NotificationTemplateInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockNotificationTemplateInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockNotificationTemplateInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *NotificationTemplateInterfaceMock) Create(in1 *v3.NotificationTemplate) (*v3.NotificationTemplate, error) {
	if mock.CreateFunc == nil {
		panic("NotificationTemplateInterfaceMock.CreateFunc: method is nil but NotificationTemplateInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.NotificationTemplate
	}{
		In1: in1,
	}
	lockNotificationTemplateInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockNotificationTemplateInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedNotificationTemplateInterface.CreateCalls())
func (mock *NotificationTemplateInterfaceMock) CreateCalls() []struct {
	In1 *v3.NotificationTemplate
} {
	var calls []struct {
		In1 *v3.NotificationTemplate
	}
	lockNotificationTemplateInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockNotificationTemplateInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *NotificationTemplateInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("NotificationTemplateInterfaceMock.DeleteFunc: method is nil but NotificationTemplateInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockNotificationTemplateInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockNotificationTemplateInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedNotificationTemplateInterface.DeleteCalls())
func (mock *NotificationTemplateInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockNotificationTemplateInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockNotificationTemplateInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *NotificationTemplateInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("NotificationTemplateInterfaceMock.DeleteCollectionFunc: method is nil but NotificationTemplateInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockNotificationTemplateInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockNotificationTemplateInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedNotificationTemplateInterface.DeleteCollectionCalls())
func (mock *NotificationTemplateInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockNotificationTemplateInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockNotificationTemplateInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *NotificationTemplateInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("NotificationTemplateInterfaceMock.DeleteNamespacedFunc: method is nil but NotificationTemplateInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockNotificationTemplateInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockNotificationTemplateInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedNotificationTemplateInterface.DeleteNamespacedCalls())
func (mock *NotificationTemplateInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockNotificationTemplateInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockNotificationTemplateInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *NotificationTemplateInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.NotificationTemplate, error) {
	if mock.GetFunc == nil {
		panic("NotificationTemplateInterfaceMock.GetFunc: method is nil but NotificationTemplateInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockNotificationTemplateInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockNotificationTemplateInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedNotificationTemplateInterface.GetCalls())
func (mock *NotificationTemplateInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockNotificationTemplateInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockNotificationTemplateInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *NotificationTemplateInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.NotificationTemplate, error) {
	if mock.GetNamespacedFunc == nil {
		panic("NotificationTemplateInterfaceMock.GetNamespacedFunc: method is nil but NotificationTemplateInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockNotificationTemplateInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockNotificationTemplateInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedNotificationTemplateInterface.GetNamespacedCalls())
func (mock *NotificationTemplateInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockNotificationTemplateInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockNotificationTemplateInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *NotificationTemplateInterfaceMock) List(opts v1.ListOptions) (*v3.NotificationTemplateList, error) {
	if mock.ListFunc == nil {
		panic("NotificationTemplateInterfaceMock.ListFunc: method is nil but NotificationTemplateInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockNotificationTemplateInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockNotificationTemplateInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedNotificationTemplateInterface.ListCalls())
func (mock *NotificationTemplateInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockNotificationTemplateInterfaceMockList.RLock()
	calls = mock.calls.List
	lockNotificationTemplateInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *NotificationTemplateInterfaceMock) ListNamespaced(namespace string, opts v1.ListOptions) (*v3.NotificationTemplateList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("NotificationTemplateInterfaceMock.ListNamespacedFunc: method is nil but NotificationTemplateInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockNotificationTemplateInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockNotificationTemplateInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedNotificationTemplateInterface.ListNamespacedCalls())
func (mock *NotificationTemplateInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockNotificationTemplateInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockNotificationTemplateInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *NotificationTemplateInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("NotificationTemplateInterfaceMock.ObjectClientFunc: method is nil but NotificationTemplateInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockNotificationTemplateInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockNotificationTemplateInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedNotificationTemplateInterface.ObjectClientCalls())
func (mock *NotificationTemplateInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockNotificationTemplateInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockNotificationTemplateInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NotificationTemplateInterfaceMock) Update(in1 *v3.NotificationTemplate) (*v3.NotificationTemplate, error) {
	if mock.UpdateFunc == nil {
		panic("NotificationTemplateInterfaceMock.UpdateFunc: method is nil but NotificationTemplateInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.NotificationTemplate
	}{
		In1: in1,
	}
	lockNotificationTemplateInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockNotificationTemplateInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedNotificationTemplateInterface.UpdateCalls())
func (mock *NotificationTemplateInterfaceMock) UpdateCalls() []struct {
	In1 *v3.NotificationTemplate
} {
	var calls []struct {
		In1 *v3.NotificationTemplate
	}
	lockNotificationTemplateInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockNotificationTemplateInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *NotificationTemplateInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("NotificationTemplateInterfaceMock.WatchFunc: method is nil but NotificationTemplateInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockNotificationTemplateInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockNotificationTemplateInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedNotificationTemplateInterface.WatchCalls())
func (mock *NotificationTemplateInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockNotificationTemplateInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockNotificationTemplateInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockNotificationTemplatesGetterMockNotificationTemplates sync.RWMutex
)

// Ensure, that NotificationTemplatesGetterMock does implement NotificationTemplatesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.NotificationTemplatesGetter = &NotificationTemplatesGetterMock{}

// NotificationTemplatesGetterMock is a mock implementation of NotificationTemplatesGetter.
//
//     func TestSomethingThatUsesNotificationTemplatesGetter(t *testing.T) {
//
//         // make and configure a mocked NotificationTemplatesGetter
//         mockedNotificationTemplatesGetter := &NotificationTemplatesGetterMock{
//             NotificationTemplatesFunc: func(namespace string) v3.NotificationTemplateInterface {
// 	               panic("mock out the NotificationTemplates method")
//             },
//         }
//
//         // use mockedNotificationTemplatesGetter in code that requires NotificationTemplatesGetter
//         // and then make assertions.
//
//     }
type NotificationTemplatesGetterMock struct {
	// NotificationTemplatesFunc mocks the NotificationTemplates method.
	NotificationTemplatesFunc func(namespace string) v3.NotificationTemplateInterface

	// calls tracks calls to the methods.
	calls struct {
		// NotificationTemplates holds details about calls to the NotificationTemplates method.
		NotificationTemplates []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// NotificationTemplates calls NotificationTemplatesFunc.
func (mock *NotificationTemplatesGetterMock) NotificationTemplates(namespace string) v3.NotificationTemplateInterface {
	if mock.NotificationTemplatesFunc == nil {
		panic("NotificationTemplatesGetterMock.NotificationTemplatesFunc: method is nil but NotificationTemplatesGetter.NotificationTemplates was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockNotificationTemplatesGetterMockNotificationTemplates.Lock()
	mock.calls.NotificationTemplates = append(mock.calls.NotificationTemplates, callInfo)
	lockNotificationTemplatesGetterMockNotificationTemplates.Unlock()
	return mock.NotificationTemplatesFunc(namespace)
}

// NotificationTemplatesCalls gets all the calls that were made to NotificationTemplates.
// Check the length with:
//     len(mockedNotificationTemplatesGetter.NotificationTemplatesCalls())
func (mock *NotificationTemplatesGetterMock) NotificationTemplatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockNotificationTemplatesGetterMockNotificationTemplates.RLock()
	calls = mock.calls.NotificationTemplates
	lockNotificationTemplatesGetterMockNotificationTemplates.RUnlock()
	return calls
}
