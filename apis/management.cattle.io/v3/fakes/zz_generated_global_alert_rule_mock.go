// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGlobalAlertRuleListerMockGet  sync.RWMutex
	lockGlobalAlertRuleListerMockList sync.RWMutex
)

// Ensure, that GlobalAlertRuleListerMock does implement GlobalAlertRuleLister.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertRuleLister = &GlobalAlertRuleListerMock{}

// GlobalAlertRuleListerMock is a mock implementation of GlobalAlertRuleLister.
//
//     func TestSomethingThatUsesGlobalAlertRuleLister(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertRuleLister
//         mockedGlobalAlertRuleLister := &GlobalAlertRuleListerMock{
//             GetFunc: func(namespace string, name string) (*v3.GlobalAlertRule, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.GlobalAlertRule, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGlobalAlertRuleLister in code that requires GlobalAlertRuleLister
//         // and then make assertions.
//
//     }
type GlobalAlertRuleListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.GlobalAlertRule, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.GlobalAlertRule, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *GlobalAlertRuleListerMock) Get(namespace string, name string) (*v3.GlobalAlertRule, error) {
	if mock.GetFunc == nil {
		panic("GlobalAlertRuleListerMock.GetFunc: method is nil but GlobalAlertRuleLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGlobalAlertRuleListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGlobalAlertRuleListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGlobalAlertRuleLister.GetCalls())
func (mock *GlobalAlertRuleListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGlobalAlertRuleListerMockGet.RLock()
	calls = mock.calls.Get
	lockGlobalAlertRuleListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GlobalAlertRuleListerMock) List(namespace string, selector labels.Selector) ([]*v3.GlobalAlertRule, error) {
	if mock.ListFunc == nil {
		panic("GlobalAlertRuleListerMock.ListFunc: method is nil but GlobalAlertRuleLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGlobalAlertRuleListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGlobalAlertRuleListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGlobalAlertRuleLister.ListCalls())
func (mock *GlobalAlertRuleListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGlobalAlertRuleListerMockList.RLock()
	calls = mock.calls.List
	lockGlobalAlertRuleListerMockList.RUnlock()
	return calls
}

var (
	lockGlobalAlertRuleControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockGlobalAlertRuleControllerMockAddClusterScopedHandler        sync.RWMutex
	lockGlobalAlertRuleControllerMockAddFeatureHandler              sync.RWMutex
	lockGlobalAlertRuleControllerMockAddHandler                     sync.RWMutex
	lockGlobalAlertRuleControllerMockEnqueue                        sync.RWMutex
	lockGlobalAlertRuleControllerMockGeneric                        sync.RWMutex
	lockGlobalAlertRuleControllerMockInformer                       sync.RWMutex
	lockGlobalAlertRuleControllerMockLister                         sync.RWMutex
	lockGlobalAlertRuleControllerMockStart                          sync.RWMutex
	lockGlobalAlertRuleControllerMockSync                           sync.RWMutex
)

// Ensure, that GlobalAlertRuleControllerMock does implement GlobalAlertRuleController.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertRuleController = &GlobalAlertRuleControllerMock{}

// GlobalAlertRuleControllerMock is a mock implementation of GlobalAlertRuleController.
//
//     func TestSomethingThatUsesGlobalAlertRuleController(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertRuleController
//         mockedGlobalAlertRuleController := &GlobalAlertRuleControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.GlobalAlertRuleLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedGlobalAlertRuleController in code that requires GlobalAlertRuleController
//         // and then make assertions.
//
//     }
type GlobalAlertRuleControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalAlertRuleHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.GlobalAlertRuleHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertRuleHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.GlobalAlertRuleHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.GlobalAlertRuleLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.GlobalAlertRuleHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.GlobalAlertRuleHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertRuleHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.GlobalAlertRuleHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *GlobalAlertRuleControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("GlobalAlertRuleControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but GlobalAlertRuleController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockGlobalAlertRuleControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockGlobalAlertRuleControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleController.AddClusterScopedFeatureHandlerCalls())
func (mock *GlobalAlertRuleControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockGlobalAlertRuleControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *GlobalAlertRuleControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("GlobalAlertRuleControllerMock.AddClusterScopedHandlerFunc: method is nil but GlobalAlertRuleController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockGlobalAlertRuleControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockGlobalAlertRuleControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleController.AddClusterScopedHandlerCalls())
func (mock *GlobalAlertRuleControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockGlobalAlertRuleControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *GlobalAlertRuleControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("GlobalAlertRuleControllerMock.AddFeatureHandlerFunc: method is nil but GlobalAlertRuleController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockGlobalAlertRuleControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockGlobalAlertRuleControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleController.AddFeatureHandlerCalls())
func (mock *GlobalAlertRuleControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockGlobalAlertRuleControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *GlobalAlertRuleControllerMock) AddHandler(ctx context.Context, name string, handler v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("GlobalAlertRuleControllerMock.AddHandlerFunc: method is nil but GlobalAlertRuleController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGlobalAlertRuleControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockGlobalAlertRuleControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleController.AddHandlerCalls())
func (mock *GlobalAlertRuleControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockGlobalAlertRuleControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GlobalAlertRuleControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GlobalAlertRuleControllerMock.EnqueueFunc: method is nil but GlobalAlertRuleController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGlobalAlertRuleControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGlobalAlertRuleControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGlobalAlertRuleController.EnqueueCalls())
func (mock *GlobalAlertRuleControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGlobalAlertRuleControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGlobalAlertRuleControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *GlobalAlertRuleControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("GlobalAlertRuleControllerMock.GenericFunc: method is nil but GlobalAlertRuleController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertRuleControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockGlobalAlertRuleControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedGlobalAlertRuleController.GenericCalls())
func (mock *GlobalAlertRuleControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertRuleControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockGlobalAlertRuleControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GlobalAlertRuleControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GlobalAlertRuleControllerMock.InformerFunc: method is nil but GlobalAlertRuleController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertRuleControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGlobalAlertRuleControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGlobalAlertRuleController.InformerCalls())
func (mock *GlobalAlertRuleControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertRuleControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGlobalAlertRuleControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *GlobalAlertRuleControllerMock) Lister() v3.GlobalAlertRuleLister {
	if mock.ListerFunc == nil {
		panic("GlobalAlertRuleControllerMock.ListerFunc: method is nil but GlobalAlertRuleController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertRuleControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockGlobalAlertRuleControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedGlobalAlertRuleController.ListerCalls())
func (mock *GlobalAlertRuleControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertRuleControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockGlobalAlertRuleControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *GlobalAlertRuleControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("GlobalAlertRuleControllerMock.StartFunc: method is nil but GlobalAlertRuleController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockGlobalAlertRuleControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockGlobalAlertRuleControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedGlobalAlertRuleController.StartCalls())
func (mock *GlobalAlertRuleControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockGlobalAlertRuleControllerMockStart.RLock()
	calls = mock.calls.Start
	lockGlobalAlertRuleControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *GlobalAlertRuleControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("GlobalAlertRuleControllerMock.SyncFunc: method is nil but GlobalAlertRuleController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockGlobalAlertRuleControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockGlobalAlertRuleControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedGlobalAlertRuleController.SyncCalls())
func (mock *GlobalAlertRuleControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockGlobalAlertRuleControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockGlobalAlertRuleControllerMockSync.RUnlock()
	return calls
}

var (
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddFeatureHandler                sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddHandler                       sync.RWMutex
	lockGlobalAlertRuleInterfaceMockAddLifecycle                     sync.RWMutex
	lockGlobalAlertRuleInterfaceMockController                       sync.RWMutex
	lockGlobalAlertRuleInterfaceMockCreate                           sync.RWMutex
	lockGlobalAlertRuleInterfaceMockDelete                           sync.RWMutex
	lockGlobalAlertRuleInterfaceMockDeleteCollection                 sync.RWMutex
	lockGlobalAlertRuleInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockGlobalAlertRuleInterfaceMockGet                              sync.RWMutex
	lockGlobalAlertRuleInterfaceMockGetNamespaced                    sync.RWMutex
	lockGlobalAlertRuleInterfaceMockList                             sync.RWMutex
	lockGlobalAlertRuleInterfaceMockObjectClient                     sync.RWMutex
	lockGlobalAlertRuleInterfaceMockUpdate                           sync.RWMutex
	lockGlobalAlertRuleInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that GlobalAlertRuleInterfaceMock does implement GlobalAlertRuleInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertRuleInterface = &GlobalAlertRuleInterfaceMock{}

// GlobalAlertRuleInterfaceMock is a mock implementation of GlobalAlertRuleInterface.
//
//     func TestSomethingThatUsesGlobalAlertRuleInterface(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertRuleInterface
//         mockedGlobalAlertRuleInterface := &GlobalAlertRuleInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalAlertRuleLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalAlertRuleLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalAlertRuleLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.GlobalAlertRuleHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.GlobalAlertRuleLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.GlobalAlertRuleController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.GlobalAlertRule) (*v3.GlobalAlertRule, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.GlobalAlertRule, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.GlobalAlertRule, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.GlobalAlertRuleList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.GlobalAlertRule) (*v3.GlobalAlertRule, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGlobalAlertRuleInterface in code that requires GlobalAlertRuleInterface
//         // and then make assertions.
//
//     }
type GlobalAlertRuleInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalAlertRuleHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalAlertRuleLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.GlobalAlertRuleHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalAlertRuleLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertRuleHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalAlertRuleLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.GlobalAlertRuleHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.GlobalAlertRuleLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.GlobalAlertRuleController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.GlobalAlertRule) (*v3.GlobalAlertRule, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.GlobalAlertRule, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.GlobalAlertRule, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.GlobalAlertRuleList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.GlobalAlertRule) (*v3.GlobalAlertRule, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertRuleHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertRuleLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertRuleHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertRuleLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertRuleHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertRuleLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertRuleHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertRuleLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.GlobalAlertRule
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.GlobalAlertRule
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but GlobalAlertRuleInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalAlertRuleLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but GlobalAlertRuleInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertRuleLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.GlobalAlertRuleLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertRuleLifecycle
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockGlobalAlertRuleInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddClusterScopedHandlerFunc: method is nil but GlobalAlertRuleInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockGlobalAlertRuleInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddClusterScopedHandlerCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockGlobalAlertRuleInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalAlertRuleLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but GlobalAlertRuleInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertRuleLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockGlobalAlertRuleInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddClusterScopedLifecycleCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.GlobalAlertRuleLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertRuleLifecycle
	}
	lockGlobalAlertRuleInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockGlobalAlertRuleInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddFeatureHandlerFunc: method is nil but GlobalAlertRuleInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockGlobalAlertRuleInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockGlobalAlertRuleInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddFeatureHandlerCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockGlobalAlertRuleInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalAlertRuleLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddFeatureLifecycleFunc: method is nil but GlobalAlertRuleInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.GlobalAlertRuleLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockGlobalAlertRuleInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockGlobalAlertRuleInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddFeatureLifecycleCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.GlobalAlertRuleLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.GlobalAlertRuleLifecycle
	}
	lockGlobalAlertRuleInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockGlobalAlertRuleInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.GlobalAlertRuleHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddHandlerFunc: method is nil but GlobalAlertRuleInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.GlobalAlertRuleHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGlobalAlertRuleInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockGlobalAlertRuleInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddHandlerCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.GlobalAlertRuleHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.GlobalAlertRuleHandlerFunc
	}
	lockGlobalAlertRuleInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockGlobalAlertRuleInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *GlobalAlertRuleInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.GlobalAlertRuleLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.AddLifecycleFunc: method is nil but GlobalAlertRuleInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.GlobalAlertRuleLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockGlobalAlertRuleInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockGlobalAlertRuleInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.AddLifecycleCalls())
func (mock *GlobalAlertRuleInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.GlobalAlertRuleLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.GlobalAlertRuleLifecycle
	}
	lockGlobalAlertRuleInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockGlobalAlertRuleInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *GlobalAlertRuleInterfaceMock) Controller() v3.GlobalAlertRuleController {
	if mock.ControllerFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.ControllerFunc: method is nil but GlobalAlertRuleInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertRuleInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockGlobalAlertRuleInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.ControllerCalls())
func (mock *GlobalAlertRuleInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertRuleInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockGlobalAlertRuleInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GlobalAlertRuleInterfaceMock) Create(in1 *v3.GlobalAlertRule) (*v3.GlobalAlertRule, error) {
	if mock.CreateFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.CreateFunc: method is nil but GlobalAlertRuleInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.GlobalAlertRule
	}{
		In1: in1,
	}
	lockGlobalAlertRuleInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGlobalAlertRuleInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.CreateCalls())
func (mock *GlobalAlertRuleInterfaceMock) CreateCalls() []struct {
	In1 *v3.GlobalAlertRule
} {
	var calls []struct {
		In1 *v3.GlobalAlertRule
	}
	lockGlobalAlertRuleInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockGlobalAlertRuleInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GlobalAlertRuleInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.DeleteFunc: method is nil but GlobalAlertRuleInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockGlobalAlertRuleInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGlobalAlertRuleInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.DeleteCalls())
func (mock *GlobalAlertRuleInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockGlobalAlertRuleInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockGlobalAlertRuleInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *GlobalAlertRuleInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.DeleteCollectionFunc: method is nil but GlobalAlertRuleInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockGlobalAlertRuleInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockGlobalAlertRuleInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.DeleteCollectionCalls())
func (mock *GlobalAlertRuleInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockGlobalAlertRuleInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockGlobalAlertRuleInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *GlobalAlertRuleInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.DeleteNamespacedFunc: method is nil but GlobalAlertRuleInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGlobalAlertRuleInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockGlobalAlertRuleInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.DeleteNamespacedCalls())
func (mock *GlobalAlertRuleInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockGlobalAlertRuleInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockGlobalAlertRuleInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GlobalAlertRuleInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.GlobalAlertRule, error) {
	if mock.GetFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.GetFunc: method is nil but GlobalAlertRuleInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockGlobalAlertRuleInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGlobalAlertRuleInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.GetCalls())
func (mock *GlobalAlertRuleInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockGlobalAlertRuleInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockGlobalAlertRuleInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *GlobalAlertRuleInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.GlobalAlertRule, error) {
	if mock.GetNamespacedFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.GetNamespacedFunc: method is nil but GlobalAlertRuleInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockGlobalAlertRuleInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockGlobalAlertRuleInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.GetNamespacedCalls())
func (mock *GlobalAlertRuleInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockGlobalAlertRuleInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockGlobalAlertRuleInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GlobalAlertRuleInterfaceMock) List(opts v1.ListOptions) (*v3.GlobalAlertRuleList, error) {
	if mock.ListFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.ListFunc: method is nil but GlobalAlertRuleInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockGlobalAlertRuleInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGlobalAlertRuleInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.ListCalls())
func (mock *GlobalAlertRuleInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockGlobalAlertRuleInterfaceMockList.RLock()
	calls = mock.calls.List
	lockGlobalAlertRuleInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *GlobalAlertRuleInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.ObjectClientFunc: method is nil but GlobalAlertRuleInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertRuleInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockGlobalAlertRuleInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.ObjectClientCalls())
func (mock *GlobalAlertRuleInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertRuleInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockGlobalAlertRuleInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GlobalAlertRuleInterfaceMock) Update(in1 *v3.GlobalAlertRule) (*v3.GlobalAlertRule, error) {
	if mock.UpdateFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.UpdateFunc: method is nil but GlobalAlertRuleInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.GlobalAlertRule
	}{
		In1: in1,
	}
	lockGlobalAlertRuleInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGlobalAlertRuleInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.UpdateCalls())
func (mock *GlobalAlertRuleInterfaceMock) UpdateCalls() []struct {
	In1 *v3.GlobalAlertRule
} {
	var calls []struct {
		In1 *v3.GlobalAlertRule
	}
	lockGlobalAlertRuleInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockGlobalAlertRuleInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GlobalAlertRuleInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GlobalAlertRuleInterfaceMock.WatchFunc: method is nil but GlobalAlertRuleInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockGlobalAlertRuleInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGlobalAlertRuleInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGlobalAlertRuleInterface.WatchCalls())
func (mock *GlobalAlertRuleInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockGlobalAlertRuleInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockGlobalAlertRuleInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockGlobalAlertRulesGetterMockGlobalAlertRules sync.RWMutex
)

// Ensure, that GlobalAlertRulesGetterMock does implement GlobalAlertRulesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertRulesGetter = &GlobalAlertRulesGetterMock{}

// GlobalAlertRulesGetterMock is a mock implementation of GlobalAlertRulesGetter.
//
//     func TestSomethingThatUsesGlobalAlertRulesGetter(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertRulesGetter
//         mockedGlobalAlertRulesGetter := &GlobalAlertRulesGetterMock{
//             GlobalAlertRulesFunc: func(namespace string) v3.GlobalAlertRuleInterface {
// 	               panic("mock out the GlobalAlertRules method")
//             },
//         }
//
//         // use mockedGlobalAlertRulesGetter in code that requires GlobalAlertRulesGetter
//         // and then make assertions.
//
//     }
type GlobalAlertRulesGetterMock struct {
	// GlobalAlertRulesFunc mocks the GlobalAlertRules method.
	GlobalAlertRulesFunc func(namespace string) v3.GlobalAlertRuleInterface

	// calls tracks calls to the methods.
	calls struct {
		// GlobalAlertRules holds details about calls to the GlobalAlertRules method.
		GlobalAlertRules []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// GlobalAlertRules calls GlobalAlertRulesFunc.
func (mock *GlobalAlertRulesGetterMock) GlobalAlertRules(namespace string) v3.GlobalAlertRuleInterface {
	if mock.GlobalAlertRulesFunc == nil {
		panic("GlobalAlertRulesGetterMock.GlobalAlertRulesFunc: method is nil but GlobalAlertRulesGetter.GlobalAlertRules was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockGlobalAlertRulesGetterMockGlobalAlertRules.Lock()
	mock.calls.GlobalAlertRules = append(mock.calls.GlobalAlertRules, callInfo)
	lockGlobalAlertRulesGetterMockGlobalAlertRules.Unlock()
	return mock.GlobalAlertRulesFunc(namespace)
}

// GlobalAlertRulesCalls gets all the calls that were made to GlobalAlertRules.
// Check the length with:
//     len(mockedGlobalAlertRulesGetter.GlobalAlertRulesCalls())
func (mock *GlobalAlertRulesGetterMock) GlobalAlertRulesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockGlobalAlertRulesGetterMockGlobalAlertRules.RLock()
	calls = mock.calls.GlobalAlertRules
	lockGlobalAlertRulesGetterMockGlobalAlertRules.RUnlock()
	return calls
}
