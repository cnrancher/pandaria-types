// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGlobalAlertGroupListerMockGet  sync.RWMutex
	lockGlobalAlertGroupListerMockList sync.RWMutex
)

// Ensure, that GlobalAlertGroupListerMock does implement GlobalAlertGroupLister.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertGroupLister = &GlobalAlertGroupListerMock{}

// GlobalAlertGroupListerMock is a mock implementation of GlobalAlertGroupLister.
//
//     func TestSomethingThatUsesGlobalAlertGroupLister(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertGroupLister
//         mockedGlobalAlertGroupLister := &GlobalAlertGroupListerMock{
//             GetFunc: func(namespace string, name string) (*v3.GlobalAlertGroup, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.GlobalAlertGroup, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGlobalAlertGroupLister in code that requires GlobalAlertGroupLister
//         // and then make assertions.
//
//     }
type GlobalAlertGroupListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.GlobalAlertGroup, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.GlobalAlertGroup, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *GlobalAlertGroupListerMock) Get(namespace string, name string) (*v3.GlobalAlertGroup, error) {
	if mock.GetFunc == nil {
		panic("GlobalAlertGroupListerMock.GetFunc: method is nil but GlobalAlertGroupLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGlobalAlertGroupListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGlobalAlertGroupListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGlobalAlertGroupLister.GetCalls())
func (mock *GlobalAlertGroupListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGlobalAlertGroupListerMockGet.RLock()
	calls = mock.calls.Get
	lockGlobalAlertGroupListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GlobalAlertGroupListerMock) List(namespace string, selector labels.Selector) ([]*v3.GlobalAlertGroup, error) {
	if mock.ListFunc == nil {
		panic("GlobalAlertGroupListerMock.ListFunc: method is nil but GlobalAlertGroupLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGlobalAlertGroupListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGlobalAlertGroupListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGlobalAlertGroupLister.ListCalls())
func (mock *GlobalAlertGroupListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGlobalAlertGroupListerMockList.RLock()
	calls = mock.calls.List
	lockGlobalAlertGroupListerMockList.RUnlock()
	return calls
}

var (
	lockGlobalAlertGroupControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockGlobalAlertGroupControllerMockAddClusterScopedHandler        sync.RWMutex
	lockGlobalAlertGroupControllerMockAddFeatureHandler              sync.RWMutex
	lockGlobalAlertGroupControllerMockAddHandler                     sync.RWMutex
	lockGlobalAlertGroupControllerMockEnqueue                        sync.RWMutex
	lockGlobalAlertGroupControllerMockGeneric                        sync.RWMutex
	lockGlobalAlertGroupControllerMockInformer                       sync.RWMutex
	lockGlobalAlertGroupControllerMockLister                         sync.RWMutex
	lockGlobalAlertGroupControllerMockStart                          sync.RWMutex
	lockGlobalAlertGroupControllerMockSync                           sync.RWMutex
)

// Ensure, that GlobalAlertGroupControllerMock does implement GlobalAlertGroupController.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertGroupController = &GlobalAlertGroupControllerMock{}

// GlobalAlertGroupControllerMock is a mock implementation of GlobalAlertGroupController.
//
//     func TestSomethingThatUsesGlobalAlertGroupController(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertGroupController
//         mockedGlobalAlertGroupController := &GlobalAlertGroupControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.GlobalAlertGroupLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedGlobalAlertGroupController in code that requires GlobalAlertGroupController
//         // and then make assertions.
//
//     }
type GlobalAlertGroupControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalAlertGroupHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.GlobalAlertGroupHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertGroupHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.GlobalAlertGroupHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.GlobalAlertGroupLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.GlobalAlertGroupHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.GlobalAlertGroupHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertGroupHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.GlobalAlertGroupHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *GlobalAlertGroupControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("GlobalAlertGroupControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but GlobalAlertGroupController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockGlobalAlertGroupControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockGlobalAlertGroupControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupController.AddClusterScopedFeatureHandlerCalls())
func (mock *GlobalAlertGroupControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockGlobalAlertGroupControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *GlobalAlertGroupControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("GlobalAlertGroupControllerMock.AddClusterScopedHandlerFunc: method is nil but GlobalAlertGroupController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockGlobalAlertGroupControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockGlobalAlertGroupControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupController.AddClusterScopedHandlerCalls())
func (mock *GlobalAlertGroupControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockGlobalAlertGroupControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *GlobalAlertGroupControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("GlobalAlertGroupControllerMock.AddFeatureHandlerFunc: method is nil but GlobalAlertGroupController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockGlobalAlertGroupControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockGlobalAlertGroupControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupController.AddFeatureHandlerCalls())
func (mock *GlobalAlertGroupControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockGlobalAlertGroupControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *GlobalAlertGroupControllerMock) AddHandler(ctx context.Context, name string, handler v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("GlobalAlertGroupControllerMock.AddHandlerFunc: method is nil but GlobalAlertGroupController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGlobalAlertGroupControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockGlobalAlertGroupControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupController.AddHandlerCalls())
func (mock *GlobalAlertGroupControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockGlobalAlertGroupControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GlobalAlertGroupControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GlobalAlertGroupControllerMock.EnqueueFunc: method is nil but GlobalAlertGroupController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGlobalAlertGroupControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGlobalAlertGroupControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGlobalAlertGroupController.EnqueueCalls())
func (mock *GlobalAlertGroupControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGlobalAlertGroupControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGlobalAlertGroupControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *GlobalAlertGroupControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("GlobalAlertGroupControllerMock.GenericFunc: method is nil but GlobalAlertGroupController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertGroupControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockGlobalAlertGroupControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedGlobalAlertGroupController.GenericCalls())
func (mock *GlobalAlertGroupControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertGroupControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockGlobalAlertGroupControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GlobalAlertGroupControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GlobalAlertGroupControllerMock.InformerFunc: method is nil but GlobalAlertGroupController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertGroupControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGlobalAlertGroupControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGlobalAlertGroupController.InformerCalls())
func (mock *GlobalAlertGroupControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertGroupControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGlobalAlertGroupControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *GlobalAlertGroupControllerMock) Lister() v3.GlobalAlertGroupLister {
	if mock.ListerFunc == nil {
		panic("GlobalAlertGroupControllerMock.ListerFunc: method is nil but GlobalAlertGroupController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertGroupControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockGlobalAlertGroupControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedGlobalAlertGroupController.ListerCalls())
func (mock *GlobalAlertGroupControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertGroupControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockGlobalAlertGroupControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *GlobalAlertGroupControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("GlobalAlertGroupControllerMock.StartFunc: method is nil but GlobalAlertGroupController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockGlobalAlertGroupControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockGlobalAlertGroupControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedGlobalAlertGroupController.StartCalls())
func (mock *GlobalAlertGroupControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockGlobalAlertGroupControllerMockStart.RLock()
	calls = mock.calls.Start
	lockGlobalAlertGroupControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *GlobalAlertGroupControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("GlobalAlertGroupControllerMock.SyncFunc: method is nil but GlobalAlertGroupController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockGlobalAlertGroupControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockGlobalAlertGroupControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedGlobalAlertGroupController.SyncCalls())
func (mock *GlobalAlertGroupControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockGlobalAlertGroupControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockGlobalAlertGroupControllerMockSync.RUnlock()
	return calls
}

var (
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddFeatureHandler                sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddHandler                       sync.RWMutex
	lockGlobalAlertGroupInterfaceMockAddLifecycle                     sync.RWMutex
	lockGlobalAlertGroupInterfaceMockController                       sync.RWMutex
	lockGlobalAlertGroupInterfaceMockCreate                           sync.RWMutex
	lockGlobalAlertGroupInterfaceMockDelete                           sync.RWMutex
	lockGlobalAlertGroupInterfaceMockDeleteCollection                 sync.RWMutex
	lockGlobalAlertGroupInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockGlobalAlertGroupInterfaceMockGet                              sync.RWMutex
	lockGlobalAlertGroupInterfaceMockGetNamespaced                    sync.RWMutex
	lockGlobalAlertGroupInterfaceMockList                             sync.RWMutex
	lockGlobalAlertGroupInterfaceMockObjectClient                     sync.RWMutex
	lockGlobalAlertGroupInterfaceMockUpdate                           sync.RWMutex
	lockGlobalAlertGroupInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that GlobalAlertGroupInterfaceMock does implement GlobalAlertGroupInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertGroupInterface = &GlobalAlertGroupInterfaceMock{}

// GlobalAlertGroupInterfaceMock is a mock implementation of GlobalAlertGroupInterface.
//
//     func TestSomethingThatUsesGlobalAlertGroupInterface(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertGroupInterface
//         mockedGlobalAlertGroupInterface := &GlobalAlertGroupInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalAlertGroupLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalAlertGroupLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalAlertGroupLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.GlobalAlertGroupHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.GlobalAlertGroupLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.GlobalAlertGroupController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.GlobalAlertGroup) (*v3.GlobalAlertGroup, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.GlobalAlertGroup, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.GlobalAlertGroup, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.GlobalAlertGroupList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.GlobalAlertGroup) (*v3.GlobalAlertGroup, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGlobalAlertGroupInterface in code that requires GlobalAlertGroupInterface
//         // and then make assertions.
//
//     }
type GlobalAlertGroupInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalAlertGroupHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalAlertGroupLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.GlobalAlertGroupHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalAlertGroupLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertGroupHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalAlertGroupLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.GlobalAlertGroupHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.GlobalAlertGroupLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.GlobalAlertGroupController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.GlobalAlertGroup) (*v3.GlobalAlertGroup, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.GlobalAlertGroup, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.GlobalAlertGroup, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.GlobalAlertGroupList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.GlobalAlertGroup) (*v3.GlobalAlertGroup, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertGroupHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertGroupLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertGroupHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertGroupLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertGroupHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertGroupLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.GlobalAlertGroupHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.GlobalAlertGroupLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.GlobalAlertGroup
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.GlobalAlertGroup
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but GlobalAlertGroupInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.GlobalAlertGroupLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but GlobalAlertGroupInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertGroupLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.GlobalAlertGroupLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertGroupLifecycle
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockGlobalAlertGroupInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddClusterScopedHandlerFunc: method is nil but GlobalAlertGroupInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockGlobalAlertGroupInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddClusterScopedHandlerCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockGlobalAlertGroupInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.GlobalAlertGroupLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but GlobalAlertGroupInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertGroupLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockGlobalAlertGroupInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddClusterScopedLifecycleCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.GlobalAlertGroupLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.GlobalAlertGroupLifecycle
	}
	lockGlobalAlertGroupInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockGlobalAlertGroupInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddFeatureHandlerFunc: method is nil but GlobalAlertGroupInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockGlobalAlertGroupInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockGlobalAlertGroupInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddFeatureHandlerCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockGlobalAlertGroupInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.GlobalAlertGroupLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddFeatureLifecycleFunc: method is nil but GlobalAlertGroupInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.GlobalAlertGroupLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockGlobalAlertGroupInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockGlobalAlertGroupInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddFeatureLifecycleCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.GlobalAlertGroupLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.GlobalAlertGroupLifecycle
	}
	lockGlobalAlertGroupInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockGlobalAlertGroupInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.GlobalAlertGroupHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddHandlerFunc: method is nil but GlobalAlertGroupInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.GlobalAlertGroupHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGlobalAlertGroupInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockGlobalAlertGroupInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddHandlerCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.GlobalAlertGroupHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.GlobalAlertGroupHandlerFunc
	}
	lockGlobalAlertGroupInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockGlobalAlertGroupInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *GlobalAlertGroupInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.GlobalAlertGroupLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.AddLifecycleFunc: method is nil but GlobalAlertGroupInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.GlobalAlertGroupLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockGlobalAlertGroupInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockGlobalAlertGroupInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.AddLifecycleCalls())
func (mock *GlobalAlertGroupInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.GlobalAlertGroupLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.GlobalAlertGroupLifecycle
	}
	lockGlobalAlertGroupInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockGlobalAlertGroupInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *GlobalAlertGroupInterfaceMock) Controller() v3.GlobalAlertGroupController {
	if mock.ControllerFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.ControllerFunc: method is nil but GlobalAlertGroupInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertGroupInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockGlobalAlertGroupInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.ControllerCalls())
func (mock *GlobalAlertGroupInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertGroupInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockGlobalAlertGroupInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GlobalAlertGroupInterfaceMock) Create(in1 *v3.GlobalAlertGroup) (*v3.GlobalAlertGroup, error) {
	if mock.CreateFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.CreateFunc: method is nil but GlobalAlertGroupInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.GlobalAlertGroup
	}{
		In1: in1,
	}
	lockGlobalAlertGroupInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGlobalAlertGroupInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.CreateCalls())
func (mock *GlobalAlertGroupInterfaceMock) CreateCalls() []struct {
	In1 *v3.GlobalAlertGroup
} {
	var calls []struct {
		In1 *v3.GlobalAlertGroup
	}
	lockGlobalAlertGroupInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockGlobalAlertGroupInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GlobalAlertGroupInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.DeleteFunc: method is nil but GlobalAlertGroupInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockGlobalAlertGroupInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGlobalAlertGroupInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.DeleteCalls())
func (mock *GlobalAlertGroupInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockGlobalAlertGroupInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockGlobalAlertGroupInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *GlobalAlertGroupInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.DeleteCollectionFunc: method is nil but GlobalAlertGroupInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockGlobalAlertGroupInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockGlobalAlertGroupInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.DeleteCollectionCalls())
func (mock *GlobalAlertGroupInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockGlobalAlertGroupInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockGlobalAlertGroupInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *GlobalAlertGroupInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.DeleteNamespacedFunc: method is nil but GlobalAlertGroupInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGlobalAlertGroupInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockGlobalAlertGroupInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.DeleteNamespacedCalls())
func (mock *GlobalAlertGroupInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockGlobalAlertGroupInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockGlobalAlertGroupInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GlobalAlertGroupInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.GlobalAlertGroup, error) {
	if mock.GetFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.GetFunc: method is nil but GlobalAlertGroupInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockGlobalAlertGroupInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGlobalAlertGroupInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.GetCalls())
func (mock *GlobalAlertGroupInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockGlobalAlertGroupInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockGlobalAlertGroupInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *GlobalAlertGroupInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.GlobalAlertGroup, error) {
	if mock.GetNamespacedFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.GetNamespacedFunc: method is nil but GlobalAlertGroupInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockGlobalAlertGroupInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockGlobalAlertGroupInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.GetNamespacedCalls())
func (mock *GlobalAlertGroupInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockGlobalAlertGroupInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockGlobalAlertGroupInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GlobalAlertGroupInterfaceMock) List(opts v1.ListOptions) (*v3.GlobalAlertGroupList, error) {
	if mock.ListFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.ListFunc: method is nil but GlobalAlertGroupInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockGlobalAlertGroupInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGlobalAlertGroupInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.ListCalls())
func (mock *GlobalAlertGroupInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockGlobalAlertGroupInterfaceMockList.RLock()
	calls = mock.calls.List
	lockGlobalAlertGroupInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *GlobalAlertGroupInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.ObjectClientFunc: method is nil but GlobalAlertGroupInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockGlobalAlertGroupInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockGlobalAlertGroupInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.ObjectClientCalls())
func (mock *GlobalAlertGroupInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockGlobalAlertGroupInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockGlobalAlertGroupInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GlobalAlertGroupInterfaceMock) Update(in1 *v3.GlobalAlertGroup) (*v3.GlobalAlertGroup, error) {
	if mock.UpdateFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.UpdateFunc: method is nil but GlobalAlertGroupInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.GlobalAlertGroup
	}{
		In1: in1,
	}
	lockGlobalAlertGroupInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGlobalAlertGroupInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.UpdateCalls())
func (mock *GlobalAlertGroupInterfaceMock) UpdateCalls() []struct {
	In1 *v3.GlobalAlertGroup
} {
	var calls []struct {
		In1 *v3.GlobalAlertGroup
	}
	lockGlobalAlertGroupInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockGlobalAlertGroupInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GlobalAlertGroupInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GlobalAlertGroupInterfaceMock.WatchFunc: method is nil but GlobalAlertGroupInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockGlobalAlertGroupInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGlobalAlertGroupInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGlobalAlertGroupInterface.WatchCalls())
func (mock *GlobalAlertGroupInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockGlobalAlertGroupInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockGlobalAlertGroupInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockGlobalAlertGroupsGetterMockGlobalAlertGroups sync.RWMutex
)

// Ensure, that GlobalAlertGroupsGetterMock does implement GlobalAlertGroupsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.GlobalAlertGroupsGetter = &GlobalAlertGroupsGetterMock{}

// GlobalAlertGroupsGetterMock is a mock implementation of GlobalAlertGroupsGetter.
//
//     func TestSomethingThatUsesGlobalAlertGroupsGetter(t *testing.T) {
//
//         // make and configure a mocked GlobalAlertGroupsGetter
//         mockedGlobalAlertGroupsGetter := &GlobalAlertGroupsGetterMock{
//             GlobalAlertGroupsFunc: func(namespace string) v3.GlobalAlertGroupInterface {
// 	               panic("mock out the GlobalAlertGroups method")
//             },
//         }
//
//         // use mockedGlobalAlertGroupsGetter in code that requires GlobalAlertGroupsGetter
//         // and then make assertions.
//
//     }
type GlobalAlertGroupsGetterMock struct {
	// GlobalAlertGroupsFunc mocks the GlobalAlertGroups method.
	GlobalAlertGroupsFunc func(namespace string) v3.GlobalAlertGroupInterface

	// calls tracks calls to the methods.
	calls struct {
		// GlobalAlertGroups holds details about calls to the GlobalAlertGroups method.
		GlobalAlertGroups []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// GlobalAlertGroups calls GlobalAlertGroupsFunc.
func (mock *GlobalAlertGroupsGetterMock) GlobalAlertGroups(namespace string) v3.GlobalAlertGroupInterface {
	if mock.GlobalAlertGroupsFunc == nil {
		panic("GlobalAlertGroupsGetterMock.GlobalAlertGroupsFunc: method is nil but GlobalAlertGroupsGetter.GlobalAlertGroups was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockGlobalAlertGroupsGetterMockGlobalAlertGroups.Lock()
	mock.calls.GlobalAlertGroups = append(mock.calls.GlobalAlertGroups, callInfo)
	lockGlobalAlertGroupsGetterMockGlobalAlertGroups.Unlock()
	return mock.GlobalAlertGroupsFunc(namespace)
}

// GlobalAlertGroupsCalls gets all the calls that were made to GlobalAlertGroups.
// Check the length with:
//     len(mockedGlobalAlertGroupsGetter.GlobalAlertGroupsCalls())
func (mock *GlobalAlertGroupsGetterMock) GlobalAlertGroupsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockGlobalAlertGroupsGetterMockGlobalAlertGroups.RLock()
	calls = mock.calls.GlobalAlertGroups
	lockGlobalAlertGroupsGetterMockGlobalAlertGroups.RUnlock()
	return calls
}
