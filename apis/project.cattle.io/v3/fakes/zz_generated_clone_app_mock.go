// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/project.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockCloneAppListerMockGet  sync.RWMutex
	lockCloneAppListerMockList sync.RWMutex
)

// Ensure, that CloneAppListerMock does implement CloneAppLister.
// If this is not the case, regenerate this file with moq.
var _ v3.CloneAppLister = &CloneAppListerMock{}

// CloneAppListerMock is a mock implementation of CloneAppLister.
//
//     func TestSomethingThatUsesCloneAppLister(t *testing.T) {
//
//         // make and configure a mocked CloneAppLister
//         mockedCloneAppLister := &CloneAppListerMock{
//             GetFunc: func(namespace string, name string) (*v3.CloneApp, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.CloneApp, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedCloneAppLister in code that requires CloneAppLister
//         // and then make assertions.
//
//     }
type CloneAppListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.CloneApp, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.CloneApp, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *CloneAppListerMock) Get(namespace string, name string) (*v3.CloneApp, error) {
	if mock.GetFunc == nil {
		panic("CloneAppListerMock.GetFunc: method is nil but CloneAppLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCloneAppListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCloneAppListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCloneAppLister.GetCalls())
func (mock *CloneAppListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCloneAppListerMockGet.RLock()
	calls = mock.calls.Get
	lockCloneAppListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CloneAppListerMock) List(namespace string, selector labels.Selector) ([]*v3.CloneApp, error) {
	if mock.ListFunc == nil {
		panic("CloneAppListerMock.ListFunc: method is nil but CloneAppLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockCloneAppListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCloneAppListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCloneAppLister.ListCalls())
func (mock *CloneAppListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockCloneAppListerMockList.RLock()
	calls = mock.calls.List
	lockCloneAppListerMockList.RUnlock()
	return calls
}

var (
	lockCloneAppControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockCloneAppControllerMockAddClusterScopedHandler        sync.RWMutex
	lockCloneAppControllerMockAddFeatureHandler              sync.RWMutex
	lockCloneAppControllerMockAddHandler                     sync.RWMutex
	lockCloneAppControllerMockEnqueue                        sync.RWMutex
	lockCloneAppControllerMockEnqueueAfter                   sync.RWMutex
	lockCloneAppControllerMockGeneric                        sync.RWMutex
	lockCloneAppControllerMockInformer                       sync.RWMutex
	lockCloneAppControllerMockLister                         sync.RWMutex
	lockCloneAppControllerMockStart                          sync.RWMutex
	lockCloneAppControllerMockSync                           sync.RWMutex
)

// Ensure, that CloneAppControllerMock does implement CloneAppController.
// If this is not the case, regenerate this file with moq.
var _ v3.CloneAppController = &CloneAppControllerMock{}

// CloneAppControllerMock is a mock implementation of CloneAppController.
//
//     func TestSomethingThatUsesCloneAppController(t *testing.T) {
//
//         // make and configure a mocked CloneAppController
//         mockedCloneAppController := &CloneAppControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.CloneAppLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedCloneAppController in code that requires CloneAppController
//         // and then make assertions.
//
//     }
type CloneAppControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.CloneAppHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.CloneAppHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.CloneAppHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.CloneAppHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.CloneAppLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.CloneAppHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.CloneAppHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.CloneAppHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.CloneAppHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *CloneAppControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.CloneAppHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("CloneAppControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but CloneAppController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.CloneAppHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockCloneAppControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockCloneAppControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedCloneAppController.AddClusterScopedFeatureHandlerCalls())
func (mock *CloneAppControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.CloneAppHandlerFunc
	}
	lockCloneAppControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockCloneAppControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *CloneAppControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.CloneAppHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("CloneAppControllerMock.AddClusterScopedHandlerFunc: method is nil but CloneAppController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.CloneAppHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockCloneAppControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockCloneAppControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedCloneAppController.AddClusterScopedHandlerCalls())
func (mock *CloneAppControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.CloneAppHandlerFunc
	}
	lockCloneAppControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockCloneAppControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *CloneAppControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.CloneAppHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("CloneAppControllerMock.AddFeatureHandlerFunc: method is nil but CloneAppController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.CloneAppHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockCloneAppControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockCloneAppControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedCloneAppController.AddFeatureHandlerCalls())
func (mock *CloneAppControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.CloneAppHandlerFunc
	}
	lockCloneAppControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockCloneAppControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *CloneAppControllerMock) AddHandler(ctx context.Context, name string, handler v3.CloneAppHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("CloneAppControllerMock.AddHandlerFunc: method is nil but CloneAppController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.CloneAppHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockCloneAppControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockCloneAppControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedCloneAppController.AddHandlerCalls())
func (mock *CloneAppControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.CloneAppHandlerFunc
	}
	lockCloneAppControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockCloneAppControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *CloneAppControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("CloneAppControllerMock.EnqueueFunc: method is nil but CloneAppController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockCloneAppControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockCloneAppControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedCloneAppController.EnqueueCalls())
func (mock *CloneAppControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockCloneAppControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockCloneAppControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *CloneAppControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("CloneAppControllerMock.EnqueueAfterFunc: method is nil but CloneAppController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockCloneAppControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockCloneAppControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedCloneAppController.EnqueueAfterCalls())
func (mock *CloneAppControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockCloneAppControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockCloneAppControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *CloneAppControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("CloneAppControllerMock.GenericFunc: method is nil but CloneAppController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockCloneAppControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockCloneAppControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedCloneAppController.GenericCalls())
func (mock *CloneAppControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneAppControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockCloneAppControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *CloneAppControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("CloneAppControllerMock.InformerFunc: method is nil but CloneAppController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockCloneAppControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockCloneAppControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedCloneAppController.InformerCalls())
func (mock *CloneAppControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneAppControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockCloneAppControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *CloneAppControllerMock) Lister() v3.CloneAppLister {
	if mock.ListerFunc == nil {
		panic("CloneAppControllerMock.ListerFunc: method is nil but CloneAppController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockCloneAppControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockCloneAppControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedCloneAppController.ListerCalls())
func (mock *CloneAppControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneAppControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockCloneAppControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CloneAppControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("CloneAppControllerMock.StartFunc: method is nil but CloneAppController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockCloneAppControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockCloneAppControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedCloneAppController.StartCalls())
func (mock *CloneAppControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockCloneAppControllerMockStart.RLock()
	calls = mock.calls.Start
	lockCloneAppControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *CloneAppControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("CloneAppControllerMock.SyncFunc: method is nil but CloneAppController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockCloneAppControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockCloneAppControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedCloneAppController.SyncCalls())
func (mock *CloneAppControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockCloneAppControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockCloneAppControllerMockSync.RUnlock()
	return calls
}

var (
	lockCloneAppInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockCloneAppInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockCloneAppInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockCloneAppInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockCloneAppInterfaceMockAddFeatureHandler                sync.RWMutex
	lockCloneAppInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockCloneAppInterfaceMockAddHandler                       sync.RWMutex
	lockCloneAppInterfaceMockAddLifecycle                     sync.RWMutex
	lockCloneAppInterfaceMockController                       sync.RWMutex
	lockCloneAppInterfaceMockCreate                           sync.RWMutex
	lockCloneAppInterfaceMockDelete                           sync.RWMutex
	lockCloneAppInterfaceMockDeleteCollection                 sync.RWMutex
	lockCloneAppInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockCloneAppInterfaceMockGet                              sync.RWMutex
	lockCloneAppInterfaceMockGetNamespaced                    sync.RWMutex
	lockCloneAppInterfaceMockList                             sync.RWMutex
	lockCloneAppInterfaceMockListNamespaced                   sync.RWMutex
	lockCloneAppInterfaceMockObjectClient                     sync.RWMutex
	lockCloneAppInterfaceMockUpdate                           sync.RWMutex
	lockCloneAppInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that CloneAppInterfaceMock does implement CloneAppInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.CloneAppInterface = &CloneAppInterfaceMock{}

// CloneAppInterfaceMock is a mock implementation of CloneAppInterface.
//
//     func TestSomethingThatUsesCloneAppInterface(t *testing.T) {
//
//         // make and configure a mocked CloneAppInterface
//         mockedCloneAppInterface := &CloneAppInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.CloneAppLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.CloneAppLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.CloneAppLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.CloneAppHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.CloneAppLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.CloneAppController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.CloneApp) (*v3.CloneApp, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.CloneApp, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.CloneApp, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.CloneAppList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1.ListOptions) (*v3.CloneAppList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.CloneApp) (*v3.CloneApp, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedCloneAppInterface in code that requires CloneAppInterface
//         // and then make assertions.
//
//     }
type CloneAppInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.CloneAppHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.CloneAppLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.CloneAppHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.CloneAppLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.CloneAppHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.CloneAppLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.CloneAppHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.CloneAppLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.CloneAppController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.CloneApp) (*v3.CloneApp, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.CloneApp, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.CloneApp, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.CloneAppList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1.ListOptions) (*v3.CloneAppList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.CloneApp) (*v3.CloneApp, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.CloneAppHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CloneAppLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.CloneAppHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CloneAppLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.CloneAppHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CloneAppLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.CloneAppHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.CloneAppLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.CloneApp
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.CloneApp
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *CloneAppInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.CloneAppHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("CloneAppInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but CloneAppInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.CloneAppHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockCloneAppInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockCloneAppInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedCloneAppInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *CloneAppInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.CloneAppHandlerFunc
	}
	lockCloneAppInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockCloneAppInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *CloneAppInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.CloneAppLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("CloneAppInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but CloneAppInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.CloneAppLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockCloneAppInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockCloneAppInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedCloneAppInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *CloneAppInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.CloneAppLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.CloneAppLifecycle
	}
	lockCloneAppInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockCloneAppInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *CloneAppInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.CloneAppHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("CloneAppInterfaceMock.AddClusterScopedHandlerFunc: method is nil but CloneAppInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.CloneAppHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockCloneAppInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockCloneAppInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedCloneAppInterface.AddClusterScopedHandlerCalls())
func (mock *CloneAppInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.CloneAppHandlerFunc
	}
	lockCloneAppInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockCloneAppInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *CloneAppInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.CloneAppLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("CloneAppInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but CloneAppInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.CloneAppLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockCloneAppInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockCloneAppInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedCloneAppInterface.AddClusterScopedLifecycleCalls())
func (mock *CloneAppInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.CloneAppLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.CloneAppLifecycle
	}
	lockCloneAppInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockCloneAppInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *CloneAppInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.CloneAppHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("CloneAppInterfaceMock.AddFeatureHandlerFunc: method is nil but CloneAppInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.CloneAppHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockCloneAppInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockCloneAppInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedCloneAppInterface.AddFeatureHandlerCalls())
func (mock *CloneAppInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.CloneAppHandlerFunc
	}
	lockCloneAppInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockCloneAppInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *CloneAppInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.CloneAppLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("CloneAppInterfaceMock.AddFeatureLifecycleFunc: method is nil but CloneAppInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.CloneAppLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockCloneAppInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockCloneAppInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedCloneAppInterface.AddFeatureLifecycleCalls())
func (mock *CloneAppInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.CloneAppLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.CloneAppLifecycle
	}
	lockCloneAppInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockCloneAppInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *CloneAppInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.CloneAppHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("CloneAppInterfaceMock.AddHandlerFunc: method is nil but CloneAppInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.CloneAppHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockCloneAppInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockCloneAppInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedCloneAppInterface.AddHandlerCalls())
func (mock *CloneAppInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.CloneAppHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.CloneAppHandlerFunc
	}
	lockCloneAppInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockCloneAppInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *CloneAppInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.CloneAppLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("CloneAppInterfaceMock.AddLifecycleFunc: method is nil but CloneAppInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.CloneAppLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockCloneAppInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockCloneAppInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedCloneAppInterface.AddLifecycleCalls())
func (mock *CloneAppInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.CloneAppLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.CloneAppLifecycle
	}
	lockCloneAppInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockCloneAppInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *CloneAppInterfaceMock) Controller() v3.CloneAppController {
	if mock.ControllerFunc == nil {
		panic("CloneAppInterfaceMock.ControllerFunc: method is nil but CloneAppInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockCloneAppInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockCloneAppInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedCloneAppInterface.ControllerCalls())
func (mock *CloneAppInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneAppInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockCloneAppInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *CloneAppInterfaceMock) Create(in1 *v3.CloneApp) (*v3.CloneApp, error) {
	if mock.CreateFunc == nil {
		panic("CloneAppInterfaceMock.CreateFunc: method is nil but CloneAppInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.CloneApp
	}{
		In1: in1,
	}
	lockCloneAppInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockCloneAppInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedCloneAppInterface.CreateCalls())
func (mock *CloneAppInterfaceMock) CreateCalls() []struct {
	In1 *v3.CloneApp
} {
	var calls []struct {
		In1 *v3.CloneApp
	}
	lockCloneAppInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockCloneAppInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CloneAppInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("CloneAppInterfaceMock.DeleteFunc: method is nil but CloneAppInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockCloneAppInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockCloneAppInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCloneAppInterface.DeleteCalls())
func (mock *CloneAppInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockCloneAppInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockCloneAppInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *CloneAppInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("CloneAppInterfaceMock.DeleteCollectionFunc: method is nil but CloneAppInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockCloneAppInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockCloneAppInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedCloneAppInterface.DeleteCollectionCalls())
func (mock *CloneAppInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockCloneAppInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockCloneAppInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *CloneAppInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("CloneAppInterfaceMock.DeleteNamespacedFunc: method is nil but CloneAppInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockCloneAppInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockCloneAppInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedCloneAppInterface.DeleteNamespacedCalls())
func (mock *CloneAppInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockCloneAppInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockCloneAppInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CloneAppInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.CloneApp, error) {
	if mock.GetFunc == nil {
		panic("CloneAppInterfaceMock.GetFunc: method is nil but CloneAppInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockCloneAppInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCloneAppInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCloneAppInterface.GetCalls())
func (mock *CloneAppInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockCloneAppInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockCloneAppInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *CloneAppInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.CloneApp, error) {
	if mock.GetNamespacedFunc == nil {
		panic("CloneAppInterfaceMock.GetNamespacedFunc: method is nil but CloneAppInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockCloneAppInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockCloneAppInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedCloneAppInterface.GetNamespacedCalls())
func (mock *CloneAppInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockCloneAppInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockCloneAppInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CloneAppInterfaceMock) List(opts v1.ListOptions) (*v3.CloneAppList, error) {
	if mock.ListFunc == nil {
		panic("CloneAppInterfaceMock.ListFunc: method is nil but CloneAppInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCloneAppInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockCloneAppInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCloneAppInterface.ListCalls())
func (mock *CloneAppInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCloneAppInterfaceMockList.RLock()
	calls = mock.calls.List
	lockCloneAppInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *CloneAppInterfaceMock) ListNamespaced(namespace string, opts v1.ListOptions) (*v3.CloneAppList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("CloneAppInterfaceMock.ListNamespacedFunc: method is nil but CloneAppInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockCloneAppInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockCloneAppInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedCloneAppInterface.ListNamespacedCalls())
func (mock *CloneAppInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockCloneAppInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockCloneAppInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *CloneAppInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("CloneAppInterfaceMock.ObjectClientFunc: method is nil but CloneAppInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockCloneAppInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockCloneAppInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedCloneAppInterface.ObjectClientCalls())
func (mock *CloneAppInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockCloneAppInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockCloneAppInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CloneAppInterfaceMock) Update(in1 *v3.CloneApp) (*v3.CloneApp, error) {
	if mock.UpdateFunc == nil {
		panic("CloneAppInterfaceMock.UpdateFunc: method is nil but CloneAppInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.CloneApp
	}{
		In1: in1,
	}
	lockCloneAppInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockCloneAppInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCloneAppInterface.UpdateCalls())
func (mock *CloneAppInterfaceMock) UpdateCalls() []struct {
	In1 *v3.CloneApp
} {
	var calls []struct {
		In1 *v3.CloneApp
	}
	lockCloneAppInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockCloneAppInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *CloneAppInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("CloneAppInterfaceMock.WatchFunc: method is nil but CloneAppInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockCloneAppInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockCloneAppInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedCloneAppInterface.WatchCalls())
func (mock *CloneAppInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockCloneAppInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockCloneAppInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockCloneAppsGetterMockCloneApps sync.RWMutex
)

// Ensure, that CloneAppsGetterMock does implement CloneAppsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.CloneAppsGetter = &CloneAppsGetterMock{}

// CloneAppsGetterMock is a mock implementation of CloneAppsGetter.
//
//     func TestSomethingThatUsesCloneAppsGetter(t *testing.T) {
//
//         // make and configure a mocked CloneAppsGetter
//         mockedCloneAppsGetter := &CloneAppsGetterMock{
//             CloneAppsFunc: func(namespace string) v3.CloneAppInterface {
// 	               panic("mock out the CloneApps method")
//             },
//         }
//
//         // use mockedCloneAppsGetter in code that requires CloneAppsGetter
//         // and then make assertions.
//
//     }
type CloneAppsGetterMock struct {
	// CloneAppsFunc mocks the CloneApps method.
	CloneAppsFunc func(namespace string) v3.CloneAppInterface

	// calls tracks calls to the methods.
	calls struct {
		// CloneApps holds details about calls to the CloneApps method.
		CloneApps []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// CloneApps calls CloneAppsFunc.
func (mock *CloneAppsGetterMock) CloneApps(namespace string) v3.CloneAppInterface {
	if mock.CloneAppsFunc == nil {
		panic("CloneAppsGetterMock.CloneAppsFunc: method is nil but CloneAppsGetter.CloneApps was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockCloneAppsGetterMockCloneApps.Lock()
	mock.calls.CloneApps = append(mock.calls.CloneApps, callInfo)
	lockCloneAppsGetterMockCloneApps.Unlock()
	return mock.CloneAppsFunc(namespace)
}

// CloneAppsCalls gets all the calls that were made to CloneApps.
// Check the length with:
//     len(mockedCloneAppsGetter.CloneAppsCalls())
func (mock *CloneAppsGetterMock) CloneAppsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockCloneAppsGetterMockCloneApps.RLock()
	calls = mock.calls.CloneApps
	lockCloneAppsGetterMockCloneApps.RUnlock()
	return calls
}
