// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	v1 "github.com/F5Networks/k8s-bigip-ctlr/config/apis/cis/v1"
	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/cis.f5.com/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockTLSProfileListerMockGet  sync.RWMutex
	lockTLSProfileListerMockList sync.RWMutex
)

// Ensure, that TLSProfileListerMock does implement TLSProfileLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.TLSProfileLister = &TLSProfileListerMock{}

// TLSProfileListerMock is a mock implementation of TLSProfileLister.
//
//     func TestSomethingThatUsesTLSProfileLister(t *testing.T) {
//
//         // make and configure a mocked TLSProfileLister
//         mockedTLSProfileLister := &TLSProfileListerMock{
//             GetFunc: func(namespace string, name string) (*v1.TLSProfile, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.TLSProfile, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedTLSProfileLister in code that requires TLSProfileLister
//         // and then make assertions.
//
//     }
type TLSProfileListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.TLSProfile, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.TLSProfile, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *TLSProfileListerMock) Get(namespace string, name string) (*v1.TLSProfile, error) {
	if mock.GetFunc == nil {
		panic("TLSProfileListerMock.GetFunc: method is nil but TLSProfileLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTLSProfileListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTLSProfileListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTLSProfileLister.GetCalls())
func (mock *TLSProfileListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTLSProfileListerMockGet.RLock()
	calls = mock.calls.Get
	lockTLSProfileListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TLSProfileListerMock) List(namespace string, selector labels.Selector) ([]*v1.TLSProfile, error) {
	if mock.ListFunc == nil {
		panic("TLSProfileListerMock.ListFunc: method is nil but TLSProfileLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockTLSProfileListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTLSProfileListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTLSProfileLister.ListCalls())
func (mock *TLSProfileListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockTLSProfileListerMockList.RLock()
	calls = mock.calls.List
	lockTLSProfileListerMockList.RUnlock()
	return calls
}

var (
	lockTLSProfileControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockTLSProfileControllerMockAddClusterScopedHandler        sync.RWMutex
	lockTLSProfileControllerMockAddFeatureHandler              sync.RWMutex
	lockTLSProfileControllerMockAddHandler                     sync.RWMutex
	lockTLSProfileControllerMockEnqueue                        sync.RWMutex
	lockTLSProfileControllerMockEnqueueAfter                   sync.RWMutex
	lockTLSProfileControllerMockGeneric                        sync.RWMutex
	lockTLSProfileControllerMockInformer                       sync.RWMutex
	lockTLSProfileControllerMockLister                         sync.RWMutex
	lockTLSProfileControllerMockStart                          sync.RWMutex
	lockTLSProfileControllerMockSync                           sync.RWMutex
)

// Ensure, that TLSProfileControllerMock does implement TLSProfileController.
// If this is not the case, regenerate this file with moq.
var _ v1a.TLSProfileController = &TLSProfileControllerMock{}

// TLSProfileControllerMock is a mock implementation of TLSProfileController.
//
//     func TestSomethingThatUsesTLSProfileController(t *testing.T) {
//
//         // make and configure a mocked TLSProfileController
//         mockedTLSProfileController := &TLSProfileControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.TLSProfileLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedTLSProfileController in code that requires TLSProfileController
//         // and then make assertions.
//
//     }
type TLSProfileControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.TLSProfileHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.TLSProfileHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1a.TLSProfileHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.TLSProfileHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.TLSProfileLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.TLSProfileHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.TLSProfileHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.TLSProfileHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.TLSProfileHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *TLSProfileControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.TLSProfileHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("TLSProfileControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but TLSProfileController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1a.TLSProfileHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockTLSProfileControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockTLSProfileControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedTLSProfileController.AddClusterScopedFeatureHandlerCalls())
func (mock *TLSProfileControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockTLSProfileControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *TLSProfileControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.TLSProfileHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("TLSProfileControllerMock.AddClusterScopedHandlerFunc: method is nil but TLSProfileController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.TLSProfileHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockTLSProfileControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockTLSProfileControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedTLSProfileController.AddClusterScopedHandlerCalls())
func (mock *TLSProfileControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockTLSProfileControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *TLSProfileControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1a.TLSProfileHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("TLSProfileControllerMock.AddFeatureHandlerFunc: method is nil but TLSProfileController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TLSProfileHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockTLSProfileControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockTLSProfileControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedTLSProfileController.AddFeatureHandlerCalls())
func (mock *TLSProfileControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockTLSProfileControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *TLSProfileControllerMock) AddHandler(ctx context.Context, name string, handler v1a.TLSProfileHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("TLSProfileControllerMock.AddHandlerFunc: method is nil but TLSProfileController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.TLSProfileHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockTLSProfileControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockTLSProfileControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedTLSProfileController.AddHandlerCalls())
func (mock *TLSProfileControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockTLSProfileControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *TLSProfileControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("TLSProfileControllerMock.EnqueueFunc: method is nil but TLSProfileController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTLSProfileControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockTLSProfileControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedTLSProfileController.EnqueueCalls())
func (mock *TLSProfileControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTLSProfileControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockTLSProfileControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *TLSProfileControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("TLSProfileControllerMock.EnqueueAfterFunc: method is nil but TLSProfileController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockTLSProfileControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockTLSProfileControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedTLSProfileController.EnqueueAfterCalls())
func (mock *TLSProfileControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockTLSProfileControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockTLSProfileControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *TLSProfileControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("TLSProfileControllerMock.GenericFunc: method is nil but TLSProfileController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockTLSProfileControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockTLSProfileControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedTLSProfileController.GenericCalls())
func (mock *TLSProfileControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockTLSProfileControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockTLSProfileControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *TLSProfileControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("TLSProfileControllerMock.InformerFunc: method is nil but TLSProfileController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockTLSProfileControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockTLSProfileControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedTLSProfileController.InformerCalls())
func (mock *TLSProfileControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockTLSProfileControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockTLSProfileControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *TLSProfileControllerMock) Lister() v1a.TLSProfileLister {
	if mock.ListerFunc == nil {
		panic("TLSProfileControllerMock.ListerFunc: method is nil but TLSProfileController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockTLSProfileControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockTLSProfileControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedTLSProfileController.ListerCalls())
func (mock *TLSProfileControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockTLSProfileControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockTLSProfileControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *TLSProfileControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("TLSProfileControllerMock.StartFunc: method is nil but TLSProfileController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockTLSProfileControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockTLSProfileControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedTLSProfileController.StartCalls())
func (mock *TLSProfileControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockTLSProfileControllerMockStart.RLock()
	calls = mock.calls.Start
	lockTLSProfileControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *TLSProfileControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("TLSProfileControllerMock.SyncFunc: method is nil but TLSProfileController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockTLSProfileControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockTLSProfileControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedTLSProfileController.SyncCalls())
func (mock *TLSProfileControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockTLSProfileControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockTLSProfileControllerMockSync.RUnlock()
	return calls
}

var (
	lockTLSProfileInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockTLSProfileInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockTLSProfileInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockTLSProfileInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockTLSProfileInterfaceMockAddFeatureHandler                sync.RWMutex
	lockTLSProfileInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockTLSProfileInterfaceMockAddHandler                       sync.RWMutex
	lockTLSProfileInterfaceMockAddLifecycle                     sync.RWMutex
	lockTLSProfileInterfaceMockController                       sync.RWMutex
	lockTLSProfileInterfaceMockCreate                           sync.RWMutex
	lockTLSProfileInterfaceMockDelete                           sync.RWMutex
	lockTLSProfileInterfaceMockDeleteCollection                 sync.RWMutex
	lockTLSProfileInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockTLSProfileInterfaceMockGet                              sync.RWMutex
	lockTLSProfileInterfaceMockGetNamespaced                    sync.RWMutex
	lockTLSProfileInterfaceMockList                             sync.RWMutex
	lockTLSProfileInterfaceMockListNamespaced                   sync.RWMutex
	lockTLSProfileInterfaceMockObjectClient                     sync.RWMutex
	lockTLSProfileInterfaceMockUpdate                           sync.RWMutex
	lockTLSProfileInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that TLSProfileInterfaceMock does implement TLSProfileInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.TLSProfileInterface = &TLSProfileInterfaceMock{}

// TLSProfileInterfaceMock is a mock implementation of TLSProfileInterface.
//
//     func TestSomethingThatUsesTLSProfileInterface(t *testing.T) {
//
//         // make and configure a mocked TLSProfileInterface
//         mockedTLSProfileInterface := &TLSProfileInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.TLSProfileLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.TLSProfileLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v1a.TLSProfileLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.TLSProfileHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.TLSProfileLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.TLSProfileController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.TLSProfile) (*v1.TLSProfile, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.TLSProfile, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.TLSProfile, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.TLSProfileList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1b.ListOptions) (*v1a.TLSProfileList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.TLSProfile) (*v1.TLSProfile, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedTLSProfileInterface in code that requires TLSProfileInterface
//         // and then make assertions.
//
//     }
type TLSProfileInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.TLSProfileHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.TLSProfileLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.TLSProfileHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.TLSProfileLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1a.TLSProfileHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v1a.TLSProfileLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.TLSProfileHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.TLSProfileLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.TLSProfileController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.TLSProfile) (*v1.TLSProfile, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.TLSProfile, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.TLSProfile, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.TLSProfileList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1b.ListOptions) (*v1a.TLSProfileList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.TLSProfile) (*v1.TLSProfile, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.TLSProfileHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TLSProfileLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.TLSProfileHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TLSProfileLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.TLSProfileHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TLSProfileLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.TLSProfileHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TLSProfileLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.TLSProfile
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.TLSProfile
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *TLSProfileInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.TLSProfileHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("TLSProfileInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but TLSProfileInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1a.TLSProfileHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockTLSProfileInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockTLSProfileInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedTLSProfileInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *TLSProfileInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockTLSProfileInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *TLSProfileInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.TLSProfileLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("TLSProfileInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but TLSProfileInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1a.TLSProfileLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockTLSProfileInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockTLSProfileInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedTLSProfileInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *TLSProfileInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v1a.TLSProfileLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1a.TLSProfileLifecycle
	}
	lockTLSProfileInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockTLSProfileInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *TLSProfileInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.TLSProfileHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("TLSProfileInterfaceMock.AddClusterScopedHandlerFunc: method is nil but TLSProfileInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.TLSProfileHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockTLSProfileInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockTLSProfileInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedTLSProfileInterface.AddClusterScopedHandlerCalls())
func (mock *TLSProfileInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockTLSProfileInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *TLSProfileInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.TLSProfileLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("TLSProfileInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but TLSProfileInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.TLSProfileLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockTLSProfileInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockTLSProfileInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedTLSProfileInterface.AddClusterScopedLifecycleCalls())
func (mock *TLSProfileInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.TLSProfileLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.TLSProfileLifecycle
	}
	lockTLSProfileInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockTLSProfileInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *TLSProfileInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1a.TLSProfileHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("TLSProfileInterfaceMock.AddFeatureHandlerFunc: method is nil but TLSProfileInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TLSProfileHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockTLSProfileInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockTLSProfileInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedTLSProfileInterface.AddFeatureHandlerCalls())
func (mock *TLSProfileInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockTLSProfileInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *TLSProfileInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v1a.TLSProfileLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("TLSProfileInterfaceMock.AddFeatureLifecycleFunc: method is nil but TLSProfileInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1a.TLSProfileLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockTLSProfileInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockTLSProfileInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedTLSProfileInterface.AddFeatureLifecycleCalls())
func (mock *TLSProfileInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v1a.TLSProfileLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1a.TLSProfileLifecycle
	}
	lockTLSProfileInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockTLSProfileInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *TLSProfileInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.TLSProfileHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("TLSProfileInterfaceMock.AddHandlerFunc: method is nil but TLSProfileInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.TLSProfileHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockTLSProfileInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockTLSProfileInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedTLSProfileInterface.AddHandlerCalls())
func (mock *TLSProfileInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.TLSProfileHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.TLSProfileHandlerFunc
	}
	lockTLSProfileInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockTLSProfileInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *TLSProfileInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.TLSProfileLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("TLSProfileInterfaceMock.AddLifecycleFunc: method is nil but TLSProfileInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.TLSProfileLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockTLSProfileInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockTLSProfileInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedTLSProfileInterface.AddLifecycleCalls())
func (mock *TLSProfileInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.TLSProfileLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.TLSProfileLifecycle
	}
	lockTLSProfileInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockTLSProfileInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *TLSProfileInterfaceMock) Controller() v1a.TLSProfileController {
	if mock.ControllerFunc == nil {
		panic("TLSProfileInterfaceMock.ControllerFunc: method is nil but TLSProfileInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockTLSProfileInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockTLSProfileInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedTLSProfileInterface.ControllerCalls())
func (mock *TLSProfileInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockTLSProfileInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockTLSProfileInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TLSProfileInterfaceMock) Create(in1 *v1.TLSProfile) (*v1.TLSProfile, error) {
	if mock.CreateFunc == nil {
		panic("TLSProfileInterfaceMock.CreateFunc: method is nil but TLSProfileInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.TLSProfile
	}{
		In1: in1,
	}
	lockTLSProfileInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockTLSProfileInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedTLSProfileInterface.CreateCalls())
func (mock *TLSProfileInterfaceMock) CreateCalls() []struct {
	In1 *v1.TLSProfile
} {
	var calls []struct {
		In1 *v1.TLSProfile
	}
	lockTLSProfileInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockTLSProfileInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TLSProfileInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("TLSProfileInterfaceMock.DeleteFunc: method is nil but TLSProfileInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockTLSProfileInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockTLSProfileInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedTLSProfileInterface.DeleteCalls())
func (mock *TLSProfileInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockTLSProfileInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockTLSProfileInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *TLSProfileInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("TLSProfileInterfaceMock.DeleteCollectionFunc: method is nil but TLSProfileInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockTLSProfileInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockTLSProfileInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedTLSProfileInterface.DeleteCollectionCalls())
func (mock *TLSProfileInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockTLSProfileInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockTLSProfileInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *TLSProfileInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("TLSProfileInterfaceMock.DeleteNamespacedFunc: method is nil but TLSProfileInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTLSProfileInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockTLSProfileInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedTLSProfileInterface.DeleteNamespacedCalls())
func (mock *TLSProfileInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockTLSProfileInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockTLSProfileInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TLSProfileInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.TLSProfile, error) {
	if mock.GetFunc == nil {
		panic("TLSProfileInterfaceMock.GetFunc: method is nil but TLSProfileInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockTLSProfileInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTLSProfileInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTLSProfileInterface.GetCalls())
func (mock *TLSProfileInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockTLSProfileInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockTLSProfileInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *TLSProfileInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.TLSProfile, error) {
	if mock.GetNamespacedFunc == nil {
		panic("TLSProfileInterfaceMock.GetNamespacedFunc: method is nil but TLSProfileInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockTLSProfileInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockTLSProfileInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedTLSProfileInterface.GetNamespacedCalls())
func (mock *TLSProfileInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockTLSProfileInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockTLSProfileInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TLSProfileInterfaceMock) List(opts v1b.ListOptions) (*v1a.TLSProfileList, error) {
	if mock.ListFunc == nil {
		panic("TLSProfileInterfaceMock.ListFunc: method is nil but TLSProfileInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockTLSProfileInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTLSProfileInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTLSProfileInterface.ListCalls())
func (mock *TLSProfileInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockTLSProfileInterfaceMockList.RLock()
	calls = mock.calls.List
	lockTLSProfileInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *TLSProfileInterfaceMock) ListNamespaced(namespace string, opts v1b.ListOptions) (*v1a.TLSProfileList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("TLSProfileInterfaceMock.ListNamespacedFunc: method is nil but TLSProfileInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockTLSProfileInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockTLSProfileInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedTLSProfileInterface.ListNamespacedCalls())
func (mock *TLSProfileInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockTLSProfileInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockTLSProfileInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *TLSProfileInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("TLSProfileInterfaceMock.ObjectClientFunc: method is nil but TLSProfileInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockTLSProfileInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockTLSProfileInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedTLSProfileInterface.ObjectClientCalls())
func (mock *TLSProfileInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockTLSProfileInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockTLSProfileInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TLSProfileInterfaceMock) Update(in1 *v1.TLSProfile) (*v1.TLSProfile, error) {
	if mock.UpdateFunc == nil {
		panic("TLSProfileInterfaceMock.UpdateFunc: method is nil but TLSProfileInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.TLSProfile
	}{
		In1: in1,
	}
	lockTLSProfileInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockTLSProfileInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedTLSProfileInterface.UpdateCalls())
func (mock *TLSProfileInterfaceMock) UpdateCalls() []struct {
	In1 *v1.TLSProfile
} {
	var calls []struct {
		In1 *v1.TLSProfile
	}
	lockTLSProfileInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockTLSProfileInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *TLSProfileInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("TLSProfileInterfaceMock.WatchFunc: method is nil but TLSProfileInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockTLSProfileInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockTLSProfileInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedTLSProfileInterface.WatchCalls())
func (mock *TLSProfileInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockTLSProfileInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockTLSProfileInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockTLSProfilesGetterMockTLSProfiles sync.RWMutex
)

// Ensure, that TLSProfilesGetterMock does implement TLSProfilesGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.TLSProfilesGetter = &TLSProfilesGetterMock{}

// TLSProfilesGetterMock is a mock implementation of TLSProfilesGetter.
//
//     func TestSomethingThatUsesTLSProfilesGetter(t *testing.T) {
//
//         // make and configure a mocked TLSProfilesGetter
//         mockedTLSProfilesGetter := &TLSProfilesGetterMock{
//             TLSProfilesFunc: func(namespace string) v1a.TLSProfileInterface {
// 	               panic("mock out the TLSProfiles method")
//             },
//         }
//
//         // use mockedTLSProfilesGetter in code that requires TLSProfilesGetter
//         // and then make assertions.
//
//     }
type TLSProfilesGetterMock struct {
	// TLSProfilesFunc mocks the TLSProfiles method.
	TLSProfilesFunc func(namespace string) v1a.TLSProfileInterface

	// calls tracks calls to the methods.
	calls struct {
		// TLSProfiles holds details about calls to the TLSProfiles method.
		TLSProfiles []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// TLSProfiles calls TLSProfilesFunc.
func (mock *TLSProfilesGetterMock) TLSProfiles(namespace string) v1a.TLSProfileInterface {
	if mock.TLSProfilesFunc == nil {
		panic("TLSProfilesGetterMock.TLSProfilesFunc: method is nil but TLSProfilesGetter.TLSProfiles was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockTLSProfilesGetterMockTLSProfiles.Lock()
	mock.calls.TLSProfiles = append(mock.calls.TLSProfiles, callInfo)
	lockTLSProfilesGetterMockTLSProfiles.Unlock()
	return mock.TLSProfilesFunc(namespace)
}

// TLSProfilesCalls gets all the calls that were made to TLSProfiles.
// Check the length with:
//     len(mockedTLSProfilesGetter.TLSProfilesCalls())
func (mock *TLSProfilesGetterMock) TLSProfilesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockTLSProfilesGetterMockTLSProfiles.RLock()
	calls = mock.calls.TLSProfiles
	lockTLSProfilesGetterMockTLSProfiles.RUnlock()
	return calls
}
