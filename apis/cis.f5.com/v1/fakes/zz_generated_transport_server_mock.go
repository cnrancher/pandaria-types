// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	v1 "github.com/F5Networks/k8s-bigip-ctlr/config/apis/cis/v1"
	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/cis.f5.com/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockTransportServerListerMockGet  sync.RWMutex
	lockTransportServerListerMockList sync.RWMutex
)

// Ensure, that TransportServerListerMock does implement TransportServerLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.TransportServerLister = &TransportServerListerMock{}

// TransportServerListerMock is a mock implementation of TransportServerLister.
//
//     func TestSomethingThatUsesTransportServerLister(t *testing.T) {
//
//         // make and configure a mocked TransportServerLister
//         mockedTransportServerLister := &TransportServerListerMock{
//             GetFunc: func(namespace string, name string) (*v1.TransportServer, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.TransportServer, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedTransportServerLister in code that requires TransportServerLister
//         // and then make assertions.
//
//     }
type TransportServerListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.TransportServer, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.TransportServer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *TransportServerListerMock) Get(namespace string, name string) (*v1.TransportServer, error) {
	if mock.GetFunc == nil {
		panic("TransportServerListerMock.GetFunc: method is nil but TransportServerLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTransportServerListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTransportServerListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTransportServerLister.GetCalls())
func (mock *TransportServerListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTransportServerListerMockGet.RLock()
	calls = mock.calls.Get
	lockTransportServerListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TransportServerListerMock) List(namespace string, selector labels.Selector) ([]*v1.TransportServer, error) {
	if mock.ListFunc == nil {
		panic("TransportServerListerMock.ListFunc: method is nil but TransportServerLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockTransportServerListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTransportServerListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTransportServerLister.ListCalls())
func (mock *TransportServerListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockTransportServerListerMockList.RLock()
	calls = mock.calls.List
	lockTransportServerListerMockList.RUnlock()
	return calls
}

var (
	lockTransportServerControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockTransportServerControllerMockAddClusterScopedHandler        sync.RWMutex
	lockTransportServerControllerMockAddFeatureHandler              sync.RWMutex
	lockTransportServerControllerMockAddHandler                     sync.RWMutex
	lockTransportServerControllerMockEnqueue                        sync.RWMutex
	lockTransportServerControllerMockEnqueueAfter                   sync.RWMutex
	lockTransportServerControllerMockGeneric                        sync.RWMutex
	lockTransportServerControllerMockInformer                       sync.RWMutex
	lockTransportServerControllerMockLister                         sync.RWMutex
	lockTransportServerControllerMockStart                          sync.RWMutex
	lockTransportServerControllerMockSync                           sync.RWMutex
)

// Ensure, that TransportServerControllerMock does implement TransportServerController.
// If this is not the case, regenerate this file with moq.
var _ v1a.TransportServerController = &TransportServerControllerMock{}

// TransportServerControllerMock is a mock implementation of TransportServerController.
//
//     func TestSomethingThatUsesTransportServerController(t *testing.T) {
//
//         // make and configure a mocked TransportServerController
//         mockedTransportServerController := &TransportServerControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.TransportServerLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedTransportServerController in code that requires TransportServerController
//         // and then make assertions.
//
//     }
type TransportServerControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.TransportServerHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.TransportServerHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1a.TransportServerHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.TransportServerHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.TransportServerLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.TransportServerHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.TransportServerHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.TransportServerHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.TransportServerHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *TransportServerControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.TransportServerHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("TransportServerControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but TransportServerController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1a.TransportServerHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockTransportServerControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockTransportServerControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedTransportServerController.AddClusterScopedFeatureHandlerCalls())
func (mock *TransportServerControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1a.TransportServerHandlerFunc
	}
	lockTransportServerControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockTransportServerControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *TransportServerControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.TransportServerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("TransportServerControllerMock.AddClusterScopedHandlerFunc: method is nil but TransportServerController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.TransportServerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockTransportServerControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockTransportServerControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedTransportServerController.AddClusterScopedHandlerCalls())
func (mock *TransportServerControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.TransportServerHandlerFunc
	}
	lockTransportServerControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockTransportServerControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *TransportServerControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1a.TransportServerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("TransportServerControllerMock.AddFeatureHandlerFunc: method is nil but TransportServerController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TransportServerHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockTransportServerControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockTransportServerControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedTransportServerController.AddFeatureHandlerCalls())
func (mock *TransportServerControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TransportServerHandlerFunc
	}
	lockTransportServerControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockTransportServerControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *TransportServerControllerMock) AddHandler(ctx context.Context, name string, handler v1a.TransportServerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("TransportServerControllerMock.AddHandlerFunc: method is nil but TransportServerController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.TransportServerHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockTransportServerControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockTransportServerControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedTransportServerController.AddHandlerCalls())
func (mock *TransportServerControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.TransportServerHandlerFunc
	}
	lockTransportServerControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockTransportServerControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *TransportServerControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("TransportServerControllerMock.EnqueueFunc: method is nil but TransportServerController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockTransportServerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockTransportServerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedTransportServerController.EnqueueCalls())
func (mock *TransportServerControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockTransportServerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockTransportServerControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *TransportServerControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("TransportServerControllerMock.EnqueueAfterFunc: method is nil but TransportServerController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockTransportServerControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockTransportServerControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedTransportServerController.EnqueueAfterCalls())
func (mock *TransportServerControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockTransportServerControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockTransportServerControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *TransportServerControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("TransportServerControllerMock.GenericFunc: method is nil but TransportServerController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockTransportServerControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockTransportServerControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedTransportServerController.GenericCalls())
func (mock *TransportServerControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockTransportServerControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockTransportServerControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *TransportServerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("TransportServerControllerMock.InformerFunc: method is nil but TransportServerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockTransportServerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockTransportServerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedTransportServerController.InformerCalls())
func (mock *TransportServerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockTransportServerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockTransportServerControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *TransportServerControllerMock) Lister() v1a.TransportServerLister {
	if mock.ListerFunc == nil {
		panic("TransportServerControllerMock.ListerFunc: method is nil but TransportServerController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockTransportServerControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockTransportServerControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedTransportServerController.ListerCalls())
func (mock *TransportServerControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockTransportServerControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockTransportServerControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *TransportServerControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("TransportServerControllerMock.StartFunc: method is nil but TransportServerController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockTransportServerControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockTransportServerControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedTransportServerController.StartCalls())
func (mock *TransportServerControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockTransportServerControllerMockStart.RLock()
	calls = mock.calls.Start
	lockTransportServerControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *TransportServerControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("TransportServerControllerMock.SyncFunc: method is nil but TransportServerController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockTransportServerControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockTransportServerControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedTransportServerController.SyncCalls())
func (mock *TransportServerControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockTransportServerControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockTransportServerControllerMockSync.RUnlock()
	return calls
}

var (
	lockTransportServerInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockTransportServerInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockTransportServerInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockTransportServerInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockTransportServerInterfaceMockAddFeatureHandler                sync.RWMutex
	lockTransportServerInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockTransportServerInterfaceMockAddHandler                       sync.RWMutex
	lockTransportServerInterfaceMockAddLifecycle                     sync.RWMutex
	lockTransportServerInterfaceMockController                       sync.RWMutex
	lockTransportServerInterfaceMockCreate                           sync.RWMutex
	lockTransportServerInterfaceMockDelete                           sync.RWMutex
	lockTransportServerInterfaceMockDeleteCollection                 sync.RWMutex
	lockTransportServerInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockTransportServerInterfaceMockGet                              sync.RWMutex
	lockTransportServerInterfaceMockGetNamespaced                    sync.RWMutex
	lockTransportServerInterfaceMockList                             sync.RWMutex
	lockTransportServerInterfaceMockListNamespaced                   sync.RWMutex
	lockTransportServerInterfaceMockObjectClient                     sync.RWMutex
	lockTransportServerInterfaceMockUpdate                           sync.RWMutex
	lockTransportServerInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that TransportServerInterfaceMock does implement TransportServerInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.TransportServerInterface = &TransportServerInterfaceMock{}

// TransportServerInterfaceMock is a mock implementation of TransportServerInterface.
//
//     func TestSomethingThatUsesTransportServerInterface(t *testing.T) {
//
//         // make and configure a mocked TransportServerInterface
//         mockedTransportServerInterface := &TransportServerInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.TransportServerLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.TransportServerLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v1a.TransportServerLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.TransportServerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.TransportServerLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.TransportServerController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.TransportServer) (*v1.TransportServer, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.TransportServer, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.TransportServer, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.TransportServerList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1b.ListOptions) (*v1a.TransportServerList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.TransportServer) (*v1.TransportServer, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedTransportServerInterface in code that requires TransportServerInterface
//         // and then make assertions.
//
//     }
type TransportServerInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.TransportServerHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.TransportServerLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.TransportServerHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.TransportServerLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1a.TransportServerHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v1a.TransportServerLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.TransportServerHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.TransportServerLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.TransportServerController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.TransportServer) (*v1.TransportServer, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.TransportServer, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.TransportServer, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.TransportServerList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1b.ListOptions) (*v1a.TransportServerList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.TransportServer) (*v1.TransportServer, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.TransportServerHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TransportServerLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.TransportServerHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TransportServerLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.TransportServerHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TransportServerLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.TransportServerHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.TransportServerLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.TransportServer
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.TransportServer
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *TransportServerInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.TransportServerHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("TransportServerInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but TransportServerInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1a.TransportServerHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockTransportServerInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockTransportServerInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedTransportServerInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *TransportServerInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1a.TransportServerHandlerFunc
	}
	lockTransportServerInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockTransportServerInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *TransportServerInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.TransportServerLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("TransportServerInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but TransportServerInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1a.TransportServerLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockTransportServerInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockTransportServerInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedTransportServerInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *TransportServerInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v1a.TransportServerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1a.TransportServerLifecycle
	}
	lockTransportServerInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockTransportServerInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *TransportServerInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.TransportServerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("TransportServerInterfaceMock.AddClusterScopedHandlerFunc: method is nil but TransportServerInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.TransportServerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockTransportServerInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockTransportServerInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedTransportServerInterface.AddClusterScopedHandlerCalls())
func (mock *TransportServerInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.TransportServerHandlerFunc
	}
	lockTransportServerInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockTransportServerInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *TransportServerInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.TransportServerLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("TransportServerInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but TransportServerInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.TransportServerLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockTransportServerInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockTransportServerInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedTransportServerInterface.AddClusterScopedLifecycleCalls())
func (mock *TransportServerInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.TransportServerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.TransportServerLifecycle
	}
	lockTransportServerInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockTransportServerInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *TransportServerInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1a.TransportServerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("TransportServerInterfaceMock.AddFeatureHandlerFunc: method is nil but TransportServerInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TransportServerHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockTransportServerInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockTransportServerInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedTransportServerInterface.AddFeatureHandlerCalls())
func (mock *TransportServerInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.TransportServerHandlerFunc
	}
	lockTransportServerInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockTransportServerInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *TransportServerInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v1a.TransportServerLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("TransportServerInterfaceMock.AddFeatureLifecycleFunc: method is nil but TransportServerInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1a.TransportServerLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockTransportServerInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockTransportServerInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedTransportServerInterface.AddFeatureLifecycleCalls())
func (mock *TransportServerInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v1a.TransportServerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1a.TransportServerLifecycle
	}
	lockTransportServerInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockTransportServerInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *TransportServerInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.TransportServerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("TransportServerInterfaceMock.AddHandlerFunc: method is nil but TransportServerInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.TransportServerHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockTransportServerInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockTransportServerInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedTransportServerInterface.AddHandlerCalls())
func (mock *TransportServerInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.TransportServerHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.TransportServerHandlerFunc
	}
	lockTransportServerInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockTransportServerInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *TransportServerInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.TransportServerLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("TransportServerInterfaceMock.AddLifecycleFunc: method is nil but TransportServerInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.TransportServerLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockTransportServerInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockTransportServerInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedTransportServerInterface.AddLifecycleCalls())
func (mock *TransportServerInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.TransportServerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.TransportServerLifecycle
	}
	lockTransportServerInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockTransportServerInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *TransportServerInterfaceMock) Controller() v1a.TransportServerController {
	if mock.ControllerFunc == nil {
		panic("TransportServerInterfaceMock.ControllerFunc: method is nil but TransportServerInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockTransportServerInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockTransportServerInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedTransportServerInterface.ControllerCalls())
func (mock *TransportServerInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockTransportServerInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockTransportServerInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TransportServerInterfaceMock) Create(in1 *v1.TransportServer) (*v1.TransportServer, error) {
	if mock.CreateFunc == nil {
		panic("TransportServerInterfaceMock.CreateFunc: method is nil but TransportServerInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.TransportServer
	}{
		In1: in1,
	}
	lockTransportServerInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockTransportServerInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedTransportServerInterface.CreateCalls())
func (mock *TransportServerInterfaceMock) CreateCalls() []struct {
	In1 *v1.TransportServer
} {
	var calls []struct {
		In1 *v1.TransportServer
	}
	lockTransportServerInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockTransportServerInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TransportServerInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("TransportServerInterfaceMock.DeleteFunc: method is nil but TransportServerInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockTransportServerInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockTransportServerInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedTransportServerInterface.DeleteCalls())
func (mock *TransportServerInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockTransportServerInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockTransportServerInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *TransportServerInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("TransportServerInterfaceMock.DeleteCollectionFunc: method is nil but TransportServerInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockTransportServerInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockTransportServerInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedTransportServerInterface.DeleteCollectionCalls())
func (mock *TransportServerInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockTransportServerInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockTransportServerInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *TransportServerInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("TransportServerInterfaceMock.DeleteNamespacedFunc: method is nil but TransportServerInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockTransportServerInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockTransportServerInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedTransportServerInterface.DeleteNamespacedCalls())
func (mock *TransportServerInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockTransportServerInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockTransportServerInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *TransportServerInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.TransportServer, error) {
	if mock.GetFunc == nil {
		panic("TransportServerInterfaceMock.GetFunc: method is nil but TransportServerInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockTransportServerInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockTransportServerInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTransportServerInterface.GetCalls())
func (mock *TransportServerInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockTransportServerInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockTransportServerInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *TransportServerInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.TransportServer, error) {
	if mock.GetNamespacedFunc == nil {
		panic("TransportServerInterfaceMock.GetNamespacedFunc: method is nil but TransportServerInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockTransportServerInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockTransportServerInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedTransportServerInterface.GetNamespacedCalls())
func (mock *TransportServerInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockTransportServerInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockTransportServerInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *TransportServerInterfaceMock) List(opts v1b.ListOptions) (*v1a.TransportServerList, error) {
	if mock.ListFunc == nil {
		panic("TransportServerInterfaceMock.ListFunc: method is nil but TransportServerInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockTransportServerInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockTransportServerInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedTransportServerInterface.ListCalls())
func (mock *TransportServerInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockTransportServerInterfaceMockList.RLock()
	calls = mock.calls.List
	lockTransportServerInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *TransportServerInterfaceMock) ListNamespaced(namespace string, opts v1b.ListOptions) (*v1a.TransportServerList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("TransportServerInterfaceMock.ListNamespacedFunc: method is nil but TransportServerInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockTransportServerInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockTransportServerInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedTransportServerInterface.ListNamespacedCalls())
func (mock *TransportServerInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockTransportServerInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockTransportServerInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *TransportServerInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("TransportServerInterfaceMock.ObjectClientFunc: method is nil but TransportServerInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockTransportServerInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockTransportServerInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedTransportServerInterface.ObjectClientCalls())
func (mock *TransportServerInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockTransportServerInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockTransportServerInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TransportServerInterfaceMock) Update(in1 *v1.TransportServer) (*v1.TransportServer, error) {
	if mock.UpdateFunc == nil {
		panic("TransportServerInterfaceMock.UpdateFunc: method is nil but TransportServerInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.TransportServer
	}{
		In1: in1,
	}
	lockTransportServerInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockTransportServerInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedTransportServerInterface.UpdateCalls())
func (mock *TransportServerInterfaceMock) UpdateCalls() []struct {
	In1 *v1.TransportServer
} {
	var calls []struct {
		In1 *v1.TransportServer
	}
	lockTransportServerInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockTransportServerInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *TransportServerInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("TransportServerInterfaceMock.WatchFunc: method is nil but TransportServerInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockTransportServerInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockTransportServerInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedTransportServerInterface.WatchCalls())
func (mock *TransportServerInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockTransportServerInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockTransportServerInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockTransportServersGetterMockTransportServers sync.RWMutex
)

// Ensure, that TransportServersGetterMock does implement TransportServersGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.TransportServersGetter = &TransportServersGetterMock{}

// TransportServersGetterMock is a mock implementation of TransportServersGetter.
//
//     func TestSomethingThatUsesTransportServersGetter(t *testing.T) {
//
//         // make and configure a mocked TransportServersGetter
//         mockedTransportServersGetter := &TransportServersGetterMock{
//             TransportServersFunc: func(namespace string) v1a.TransportServerInterface {
// 	               panic("mock out the TransportServers method")
//             },
//         }
//
//         // use mockedTransportServersGetter in code that requires TransportServersGetter
//         // and then make assertions.
//
//     }
type TransportServersGetterMock struct {
	// TransportServersFunc mocks the TransportServers method.
	TransportServersFunc func(namespace string) v1a.TransportServerInterface

	// calls tracks calls to the methods.
	calls struct {
		// TransportServers holds details about calls to the TransportServers method.
		TransportServers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// TransportServers calls TransportServersFunc.
func (mock *TransportServersGetterMock) TransportServers(namespace string) v1a.TransportServerInterface {
	if mock.TransportServersFunc == nil {
		panic("TransportServersGetterMock.TransportServersFunc: method is nil but TransportServersGetter.TransportServers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockTransportServersGetterMockTransportServers.Lock()
	mock.calls.TransportServers = append(mock.calls.TransportServers, callInfo)
	lockTransportServersGetterMockTransportServers.Unlock()
	return mock.TransportServersFunc(namespace)
}

// TransportServersCalls gets all the calls that were made to TransportServers.
// Check the length with:
//     len(mockedTransportServersGetter.TransportServersCalls())
func (mock *TransportServersGetterMock) TransportServersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockTransportServersGetterMockTransportServers.RLock()
	calls = mock.calls.TransportServers
	lockTransportServersGetterMockTransportServers.RUnlock()
	return calls
}
