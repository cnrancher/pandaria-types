// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	v1 "github.com/F5Networks/k8s-bigip-ctlr/config/apis/cis/v1"
	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1a "github.com/rancher/types/apis/cis.f5.com/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockVirtualServerListerMockGet  sync.RWMutex
	lockVirtualServerListerMockList sync.RWMutex
)

// Ensure, that VirtualServerListerMock does implement VirtualServerLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.VirtualServerLister = &VirtualServerListerMock{}

// VirtualServerListerMock is a mock implementation of VirtualServerLister.
//
//     func TestSomethingThatUsesVirtualServerLister(t *testing.T) {
//
//         // make and configure a mocked VirtualServerLister
//         mockedVirtualServerLister := &VirtualServerListerMock{
//             GetFunc: func(namespace string, name string) (*v1.VirtualServer, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.VirtualServer, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedVirtualServerLister in code that requires VirtualServerLister
//         // and then make assertions.
//
//     }
type VirtualServerListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.VirtualServer, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.VirtualServer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *VirtualServerListerMock) Get(namespace string, name string) (*v1.VirtualServer, error) {
	if mock.GetFunc == nil {
		panic("VirtualServerListerMock.GetFunc: method is nil but VirtualServerLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockVirtualServerListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockVirtualServerListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedVirtualServerLister.GetCalls())
func (mock *VirtualServerListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockVirtualServerListerMockGet.RLock()
	calls = mock.calls.Get
	lockVirtualServerListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *VirtualServerListerMock) List(namespace string, selector labels.Selector) ([]*v1.VirtualServer, error) {
	if mock.ListFunc == nil {
		panic("VirtualServerListerMock.ListFunc: method is nil but VirtualServerLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockVirtualServerListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockVirtualServerListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedVirtualServerLister.ListCalls())
func (mock *VirtualServerListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockVirtualServerListerMockList.RLock()
	calls = mock.calls.List
	lockVirtualServerListerMockList.RUnlock()
	return calls
}

var (
	lockVirtualServerControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockVirtualServerControllerMockAddClusterScopedHandler        sync.RWMutex
	lockVirtualServerControllerMockAddFeatureHandler              sync.RWMutex
	lockVirtualServerControllerMockAddHandler                     sync.RWMutex
	lockVirtualServerControllerMockEnqueue                        sync.RWMutex
	lockVirtualServerControllerMockEnqueueAfter                   sync.RWMutex
	lockVirtualServerControllerMockGeneric                        sync.RWMutex
	lockVirtualServerControllerMockInformer                       sync.RWMutex
	lockVirtualServerControllerMockLister                         sync.RWMutex
	lockVirtualServerControllerMockStart                          sync.RWMutex
	lockVirtualServerControllerMockSync                           sync.RWMutex
)

// Ensure, that VirtualServerControllerMock does implement VirtualServerController.
// If this is not the case, regenerate this file with moq.
var _ v1a.VirtualServerController = &VirtualServerControllerMock{}

// VirtualServerControllerMock is a mock implementation of VirtualServerController.
//
//     func TestSomethingThatUsesVirtualServerController(t *testing.T) {
//
//         // make and configure a mocked VirtualServerController
//         mockedVirtualServerController := &VirtualServerControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.VirtualServerLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedVirtualServerController in code that requires VirtualServerController
//         // and then make assertions.
//
//     }
type VirtualServerControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.VirtualServerHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.VirtualServerHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1a.VirtualServerHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.VirtualServerHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.VirtualServerLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.VirtualServerHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.VirtualServerHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.VirtualServerHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.VirtualServerHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *VirtualServerControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v1a.VirtualServerHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("VirtualServerControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but VirtualServerController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1a.VirtualServerHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockVirtualServerControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockVirtualServerControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedVirtualServerController.AddClusterScopedFeatureHandlerCalls())
func (mock *VirtualServerControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockVirtualServerControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *VirtualServerControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.VirtualServerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("VirtualServerControllerMock.AddClusterScopedHandlerFunc: method is nil but VirtualServerController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.VirtualServerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockVirtualServerControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockVirtualServerControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedVirtualServerController.AddClusterScopedHandlerCalls())
func (mock *VirtualServerControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockVirtualServerControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *VirtualServerControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1a.VirtualServerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("VirtualServerControllerMock.AddFeatureHandlerFunc: method is nil but VirtualServerController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.VirtualServerHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockVirtualServerControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockVirtualServerControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedVirtualServerController.AddFeatureHandlerCalls())
func (mock *VirtualServerControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockVirtualServerControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *VirtualServerControllerMock) AddHandler(ctx context.Context, name string, handler v1a.VirtualServerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("VirtualServerControllerMock.AddHandlerFunc: method is nil but VirtualServerController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.VirtualServerHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockVirtualServerControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockVirtualServerControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedVirtualServerController.AddHandlerCalls())
func (mock *VirtualServerControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockVirtualServerControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *VirtualServerControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("VirtualServerControllerMock.EnqueueFunc: method is nil but VirtualServerController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockVirtualServerControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockVirtualServerControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedVirtualServerController.EnqueueCalls())
func (mock *VirtualServerControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockVirtualServerControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockVirtualServerControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *VirtualServerControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("VirtualServerControllerMock.EnqueueAfterFunc: method is nil but VirtualServerController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockVirtualServerControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockVirtualServerControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedVirtualServerController.EnqueueAfterCalls())
func (mock *VirtualServerControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockVirtualServerControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockVirtualServerControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *VirtualServerControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("VirtualServerControllerMock.GenericFunc: method is nil but VirtualServerController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServerControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockVirtualServerControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedVirtualServerController.GenericCalls())
func (mock *VirtualServerControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServerControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockVirtualServerControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *VirtualServerControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("VirtualServerControllerMock.InformerFunc: method is nil but VirtualServerController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServerControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockVirtualServerControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedVirtualServerController.InformerCalls())
func (mock *VirtualServerControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServerControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockVirtualServerControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *VirtualServerControllerMock) Lister() v1a.VirtualServerLister {
	if mock.ListerFunc == nil {
		panic("VirtualServerControllerMock.ListerFunc: method is nil but VirtualServerController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServerControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockVirtualServerControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedVirtualServerController.ListerCalls())
func (mock *VirtualServerControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServerControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockVirtualServerControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *VirtualServerControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("VirtualServerControllerMock.StartFunc: method is nil but VirtualServerController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockVirtualServerControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockVirtualServerControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedVirtualServerController.StartCalls())
func (mock *VirtualServerControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockVirtualServerControllerMockStart.RLock()
	calls = mock.calls.Start
	lockVirtualServerControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *VirtualServerControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("VirtualServerControllerMock.SyncFunc: method is nil but VirtualServerController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockVirtualServerControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockVirtualServerControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedVirtualServerController.SyncCalls())
func (mock *VirtualServerControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockVirtualServerControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockVirtualServerControllerMockSync.RUnlock()
	return calls
}

var (
	lockVirtualServerInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockVirtualServerInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockVirtualServerInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockVirtualServerInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockVirtualServerInterfaceMockAddFeatureHandler                sync.RWMutex
	lockVirtualServerInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockVirtualServerInterfaceMockAddHandler                       sync.RWMutex
	lockVirtualServerInterfaceMockAddLifecycle                     sync.RWMutex
	lockVirtualServerInterfaceMockController                       sync.RWMutex
	lockVirtualServerInterfaceMockCreate                           sync.RWMutex
	lockVirtualServerInterfaceMockDelete                           sync.RWMutex
	lockVirtualServerInterfaceMockDeleteCollection                 sync.RWMutex
	lockVirtualServerInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockVirtualServerInterfaceMockGet                              sync.RWMutex
	lockVirtualServerInterfaceMockGetNamespaced                    sync.RWMutex
	lockVirtualServerInterfaceMockList                             sync.RWMutex
	lockVirtualServerInterfaceMockListNamespaced                   sync.RWMutex
	lockVirtualServerInterfaceMockObjectClient                     sync.RWMutex
	lockVirtualServerInterfaceMockUpdate                           sync.RWMutex
	lockVirtualServerInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that VirtualServerInterfaceMock does implement VirtualServerInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.VirtualServerInterface = &VirtualServerInterfaceMock{}

// VirtualServerInterfaceMock is a mock implementation of VirtualServerInterface.
//
//     func TestSomethingThatUsesVirtualServerInterface(t *testing.T) {
//
//         // make and configure a mocked VirtualServerInterface
//         mockedVirtualServerInterface := &VirtualServerInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.VirtualServerLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.VirtualServerLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v1a.VirtualServerLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.VirtualServerHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.VirtualServerLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.VirtualServerController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.VirtualServer) (*v1.VirtualServer, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.VirtualServer, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.VirtualServer, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.VirtualServerList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1b.ListOptions) (*v1a.VirtualServerList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.VirtualServer) (*v1.VirtualServer, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedVirtualServerInterface in code that requires VirtualServerInterface
//         // and then make assertions.
//
//     }
type VirtualServerInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.VirtualServerHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.VirtualServerLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.VirtualServerHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.VirtualServerLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v1a.VirtualServerHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v1a.VirtualServerLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.VirtualServerHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.VirtualServerLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.VirtualServerController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.VirtualServer) (*v1.VirtualServer, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.VirtualServer, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.VirtualServer, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.VirtualServerList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1b.ListOptions) (*v1a.VirtualServerList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.VirtualServer) (*v1.VirtualServer, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.VirtualServerHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.VirtualServerLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.VirtualServerHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.VirtualServerLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.VirtualServerHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.VirtualServerLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.VirtualServerHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.VirtualServerLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.VirtualServer
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.VirtualServer
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *VirtualServerInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v1a.VirtualServerHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("VirtualServerInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but VirtualServerInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1a.VirtualServerHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockVirtualServerInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockVirtualServerInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedVirtualServerInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *VirtualServerInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockVirtualServerInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *VirtualServerInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v1a.VirtualServerLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("VirtualServerInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but VirtualServerInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1a.VirtualServerLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockVirtualServerInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockVirtualServerInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedVirtualServerInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *VirtualServerInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v1a.VirtualServerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v1a.VirtualServerLifecycle
	}
	lockVirtualServerInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockVirtualServerInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *VirtualServerInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.VirtualServerHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("VirtualServerInterfaceMock.AddClusterScopedHandlerFunc: method is nil but VirtualServerInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.VirtualServerHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockVirtualServerInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockVirtualServerInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedVirtualServerInterface.AddClusterScopedHandlerCalls())
func (mock *VirtualServerInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockVirtualServerInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *VirtualServerInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.VirtualServerLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("VirtualServerInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but VirtualServerInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.VirtualServerLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockVirtualServerInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockVirtualServerInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedVirtualServerInterface.AddClusterScopedLifecycleCalls())
func (mock *VirtualServerInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.VirtualServerLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.VirtualServerLifecycle
	}
	lockVirtualServerInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockVirtualServerInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *VirtualServerInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v1a.VirtualServerHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("VirtualServerInterfaceMock.AddFeatureHandlerFunc: method is nil but VirtualServerInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.VirtualServerHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockVirtualServerInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockVirtualServerInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedVirtualServerInterface.AddFeatureHandlerCalls())
func (mock *VirtualServerInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockVirtualServerInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *VirtualServerInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v1a.VirtualServerLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("VirtualServerInterfaceMock.AddFeatureLifecycleFunc: method is nil but VirtualServerInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1a.VirtualServerLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockVirtualServerInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockVirtualServerInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedVirtualServerInterface.AddFeatureLifecycleCalls())
func (mock *VirtualServerInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v1a.VirtualServerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v1a.VirtualServerLifecycle
	}
	lockVirtualServerInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockVirtualServerInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *VirtualServerInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.VirtualServerHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("VirtualServerInterfaceMock.AddHandlerFunc: method is nil but VirtualServerInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.VirtualServerHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockVirtualServerInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockVirtualServerInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedVirtualServerInterface.AddHandlerCalls())
func (mock *VirtualServerInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.VirtualServerHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.VirtualServerHandlerFunc
	}
	lockVirtualServerInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockVirtualServerInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *VirtualServerInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.VirtualServerLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("VirtualServerInterfaceMock.AddLifecycleFunc: method is nil but VirtualServerInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.VirtualServerLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockVirtualServerInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockVirtualServerInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedVirtualServerInterface.AddLifecycleCalls())
func (mock *VirtualServerInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.VirtualServerLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.VirtualServerLifecycle
	}
	lockVirtualServerInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockVirtualServerInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *VirtualServerInterfaceMock) Controller() v1a.VirtualServerController {
	if mock.ControllerFunc == nil {
		panic("VirtualServerInterfaceMock.ControllerFunc: method is nil but VirtualServerInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServerInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockVirtualServerInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedVirtualServerInterface.ControllerCalls())
func (mock *VirtualServerInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServerInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockVirtualServerInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *VirtualServerInterfaceMock) Create(in1 *v1.VirtualServer) (*v1.VirtualServer, error) {
	if mock.CreateFunc == nil {
		panic("VirtualServerInterfaceMock.CreateFunc: method is nil but VirtualServerInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.VirtualServer
	}{
		In1: in1,
	}
	lockVirtualServerInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockVirtualServerInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedVirtualServerInterface.CreateCalls())
func (mock *VirtualServerInterfaceMock) CreateCalls() []struct {
	In1 *v1.VirtualServer
} {
	var calls []struct {
		In1 *v1.VirtualServer
	}
	lockVirtualServerInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockVirtualServerInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *VirtualServerInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("VirtualServerInterfaceMock.DeleteFunc: method is nil but VirtualServerInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockVirtualServerInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockVirtualServerInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedVirtualServerInterface.DeleteCalls())
func (mock *VirtualServerInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockVirtualServerInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockVirtualServerInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *VirtualServerInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("VirtualServerInterfaceMock.DeleteCollectionFunc: method is nil but VirtualServerInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockVirtualServerInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockVirtualServerInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedVirtualServerInterface.DeleteCollectionCalls())
func (mock *VirtualServerInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockVirtualServerInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockVirtualServerInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *VirtualServerInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("VirtualServerInterfaceMock.DeleteNamespacedFunc: method is nil but VirtualServerInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockVirtualServerInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockVirtualServerInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedVirtualServerInterface.DeleteNamespacedCalls())
func (mock *VirtualServerInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockVirtualServerInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockVirtualServerInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *VirtualServerInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.VirtualServer, error) {
	if mock.GetFunc == nil {
		panic("VirtualServerInterfaceMock.GetFunc: method is nil but VirtualServerInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockVirtualServerInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockVirtualServerInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedVirtualServerInterface.GetCalls())
func (mock *VirtualServerInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockVirtualServerInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockVirtualServerInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *VirtualServerInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.VirtualServer, error) {
	if mock.GetNamespacedFunc == nil {
		panic("VirtualServerInterfaceMock.GetNamespacedFunc: method is nil but VirtualServerInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockVirtualServerInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockVirtualServerInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedVirtualServerInterface.GetNamespacedCalls())
func (mock *VirtualServerInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockVirtualServerInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockVirtualServerInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *VirtualServerInterfaceMock) List(opts v1b.ListOptions) (*v1a.VirtualServerList, error) {
	if mock.ListFunc == nil {
		panic("VirtualServerInterfaceMock.ListFunc: method is nil but VirtualServerInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockVirtualServerInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockVirtualServerInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedVirtualServerInterface.ListCalls())
func (mock *VirtualServerInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockVirtualServerInterfaceMockList.RLock()
	calls = mock.calls.List
	lockVirtualServerInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *VirtualServerInterfaceMock) ListNamespaced(namespace string, opts v1b.ListOptions) (*v1a.VirtualServerList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("VirtualServerInterfaceMock.ListNamespacedFunc: method is nil but VirtualServerInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockVirtualServerInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockVirtualServerInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedVirtualServerInterface.ListNamespacedCalls())
func (mock *VirtualServerInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockVirtualServerInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockVirtualServerInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *VirtualServerInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("VirtualServerInterfaceMock.ObjectClientFunc: method is nil but VirtualServerInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockVirtualServerInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockVirtualServerInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedVirtualServerInterface.ObjectClientCalls())
func (mock *VirtualServerInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockVirtualServerInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockVirtualServerInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *VirtualServerInterfaceMock) Update(in1 *v1.VirtualServer) (*v1.VirtualServer, error) {
	if mock.UpdateFunc == nil {
		panic("VirtualServerInterfaceMock.UpdateFunc: method is nil but VirtualServerInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.VirtualServer
	}{
		In1: in1,
	}
	lockVirtualServerInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockVirtualServerInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedVirtualServerInterface.UpdateCalls())
func (mock *VirtualServerInterfaceMock) UpdateCalls() []struct {
	In1 *v1.VirtualServer
} {
	var calls []struct {
		In1 *v1.VirtualServer
	}
	lockVirtualServerInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockVirtualServerInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *VirtualServerInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("VirtualServerInterfaceMock.WatchFunc: method is nil but VirtualServerInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockVirtualServerInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockVirtualServerInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedVirtualServerInterface.WatchCalls())
func (mock *VirtualServerInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockVirtualServerInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockVirtualServerInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockVirtualServersGetterMockVirtualServers sync.RWMutex
)

// Ensure, that VirtualServersGetterMock does implement VirtualServersGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.VirtualServersGetter = &VirtualServersGetterMock{}

// VirtualServersGetterMock is a mock implementation of VirtualServersGetter.
//
//     func TestSomethingThatUsesVirtualServersGetter(t *testing.T) {
//
//         // make and configure a mocked VirtualServersGetter
//         mockedVirtualServersGetter := &VirtualServersGetterMock{
//             VirtualServersFunc: func(namespace string) v1a.VirtualServerInterface {
// 	               panic("mock out the VirtualServers method")
//             },
//         }
//
//         // use mockedVirtualServersGetter in code that requires VirtualServersGetter
//         // and then make assertions.
//
//     }
type VirtualServersGetterMock struct {
	// VirtualServersFunc mocks the VirtualServers method.
	VirtualServersFunc func(namespace string) v1a.VirtualServerInterface

	// calls tracks calls to the methods.
	calls struct {
		// VirtualServers holds details about calls to the VirtualServers method.
		VirtualServers []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// VirtualServers calls VirtualServersFunc.
func (mock *VirtualServersGetterMock) VirtualServers(namespace string) v1a.VirtualServerInterface {
	if mock.VirtualServersFunc == nil {
		panic("VirtualServersGetterMock.VirtualServersFunc: method is nil but VirtualServersGetter.VirtualServers was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockVirtualServersGetterMockVirtualServers.Lock()
	mock.calls.VirtualServers = append(mock.calls.VirtualServers, callInfo)
	lockVirtualServersGetterMockVirtualServers.Unlock()
	return mock.VirtualServersFunc(namespace)
}

// VirtualServersCalls gets all the calls that were made to VirtualServers.
// Check the length with:
//     len(mockedVirtualServersGetter.VirtualServersCalls())
func (mock *VirtualServersGetterMock) VirtualServersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockVirtualServersGetterMockVirtualServers.RLock()
	calls = mock.calls.VirtualServers
	lockVirtualServersGetterMockVirtualServers.RUnlock()
	return calls
}
