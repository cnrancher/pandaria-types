// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/mgt.pandaria.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockSensitiveFilterListerMockGet  sync.RWMutex
	lockSensitiveFilterListerMockList sync.RWMutex
)

// Ensure, that SensitiveFilterListerMock does implement SensitiveFilterLister.
// If this is not the case, regenerate this file with moq.
var _ v3.SensitiveFilterLister = &SensitiveFilterListerMock{}

// SensitiveFilterListerMock is a mock implementation of SensitiveFilterLister.
//
//     func TestSomethingThatUsesSensitiveFilterLister(t *testing.T) {
//
//         // make and configure a mocked SensitiveFilterLister
//         mockedSensitiveFilterLister := &SensitiveFilterListerMock{
//             GetFunc: func(namespace string, name string) (*v3.SensitiveFilter, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.SensitiveFilter, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedSensitiveFilterLister in code that requires SensitiveFilterLister
//         // and then make assertions.
//
//     }
type SensitiveFilterListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.SensitiveFilter, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.SensitiveFilter, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *SensitiveFilterListerMock) Get(namespace string, name string) (*v3.SensitiveFilter, error) {
	if mock.GetFunc == nil {
		panic("SensitiveFilterListerMock.GetFunc: method is nil but SensitiveFilterLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockSensitiveFilterListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockSensitiveFilterListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSensitiveFilterLister.GetCalls())
func (mock *SensitiveFilterListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockSensitiveFilterListerMockGet.RLock()
	calls = mock.calls.Get
	lockSensitiveFilterListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SensitiveFilterListerMock) List(namespace string, selector labels.Selector) ([]*v3.SensitiveFilter, error) {
	if mock.ListFunc == nil {
		panic("SensitiveFilterListerMock.ListFunc: method is nil but SensitiveFilterLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockSensitiveFilterListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockSensitiveFilterListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSensitiveFilterLister.ListCalls())
func (mock *SensitiveFilterListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockSensitiveFilterListerMockList.RLock()
	calls = mock.calls.List
	lockSensitiveFilterListerMockList.RUnlock()
	return calls
}

var (
	lockSensitiveFilterControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockSensitiveFilterControllerMockAddClusterScopedHandler        sync.RWMutex
	lockSensitiveFilterControllerMockAddFeatureHandler              sync.RWMutex
	lockSensitiveFilterControllerMockAddHandler                     sync.RWMutex
	lockSensitiveFilterControllerMockEnqueue                        sync.RWMutex
	lockSensitiveFilterControllerMockEnqueueAfter                   sync.RWMutex
	lockSensitiveFilterControllerMockGeneric                        sync.RWMutex
	lockSensitiveFilterControllerMockInformer                       sync.RWMutex
	lockSensitiveFilterControllerMockLister                         sync.RWMutex
	lockSensitiveFilterControllerMockStart                          sync.RWMutex
	lockSensitiveFilterControllerMockSync                           sync.RWMutex
)

// Ensure, that SensitiveFilterControllerMock does implement SensitiveFilterController.
// If this is not the case, regenerate this file with moq.
var _ v3.SensitiveFilterController = &SensitiveFilterControllerMock{}

// SensitiveFilterControllerMock is a mock implementation of SensitiveFilterController.
//
//     func TestSomethingThatUsesSensitiveFilterController(t *testing.T) {
//
//         // make and configure a mocked SensitiveFilterController
//         mockedSensitiveFilterController := &SensitiveFilterControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.SensitiveFilterLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedSensitiveFilterController in code that requires SensitiveFilterController
//         // and then make assertions.
//
//     }
type SensitiveFilterControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.SensitiveFilterHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.SensitiveFilterHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.SensitiveFilterHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.SensitiveFilterHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.SensitiveFilterLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.SensitiveFilterHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.SensitiveFilterHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.SensitiveFilterHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.SensitiveFilterHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *SensitiveFilterControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.SensitiveFilterHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("SensitiveFilterControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but SensitiveFilterController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.SensitiveFilterHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockSensitiveFilterControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockSensitiveFilterControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedSensitiveFilterController.AddClusterScopedFeatureHandlerCalls())
func (mock *SensitiveFilterControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockSensitiveFilterControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *SensitiveFilterControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.SensitiveFilterHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("SensitiveFilterControllerMock.AddClusterScopedHandlerFunc: method is nil but SensitiveFilterController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.SensitiveFilterHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockSensitiveFilterControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockSensitiveFilterControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedSensitiveFilterController.AddClusterScopedHandlerCalls())
func (mock *SensitiveFilterControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockSensitiveFilterControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *SensitiveFilterControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.SensitiveFilterHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("SensitiveFilterControllerMock.AddFeatureHandlerFunc: method is nil but SensitiveFilterController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.SensitiveFilterHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockSensitiveFilterControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockSensitiveFilterControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedSensitiveFilterController.AddFeatureHandlerCalls())
func (mock *SensitiveFilterControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockSensitiveFilterControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *SensitiveFilterControllerMock) AddHandler(ctx context.Context, name string, handler v3.SensitiveFilterHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("SensitiveFilterControllerMock.AddHandlerFunc: method is nil but SensitiveFilterController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.SensitiveFilterHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockSensitiveFilterControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockSensitiveFilterControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSensitiveFilterController.AddHandlerCalls())
func (mock *SensitiveFilterControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockSensitiveFilterControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *SensitiveFilterControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("SensitiveFilterControllerMock.EnqueueFunc: method is nil but SensitiveFilterController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockSensitiveFilterControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockSensitiveFilterControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedSensitiveFilterController.EnqueueCalls())
func (mock *SensitiveFilterControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockSensitiveFilterControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockSensitiveFilterControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *SensitiveFilterControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("SensitiveFilterControllerMock.EnqueueAfterFunc: method is nil but SensitiveFilterController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockSensitiveFilterControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockSensitiveFilterControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedSensitiveFilterController.EnqueueAfterCalls())
func (mock *SensitiveFilterControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockSensitiveFilterControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockSensitiveFilterControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *SensitiveFilterControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("SensitiveFilterControllerMock.GenericFunc: method is nil but SensitiveFilterController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockSensitiveFilterControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockSensitiveFilterControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedSensitiveFilterController.GenericCalls())
func (mock *SensitiveFilterControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockSensitiveFilterControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockSensitiveFilterControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *SensitiveFilterControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("SensitiveFilterControllerMock.InformerFunc: method is nil but SensitiveFilterController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockSensitiveFilterControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockSensitiveFilterControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedSensitiveFilterController.InformerCalls())
func (mock *SensitiveFilterControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockSensitiveFilterControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockSensitiveFilterControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *SensitiveFilterControllerMock) Lister() v3.SensitiveFilterLister {
	if mock.ListerFunc == nil {
		panic("SensitiveFilterControllerMock.ListerFunc: method is nil but SensitiveFilterController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockSensitiveFilterControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockSensitiveFilterControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedSensitiveFilterController.ListerCalls())
func (mock *SensitiveFilterControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockSensitiveFilterControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockSensitiveFilterControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *SensitiveFilterControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("SensitiveFilterControllerMock.StartFunc: method is nil but SensitiveFilterController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockSensitiveFilterControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockSensitiveFilterControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedSensitiveFilterController.StartCalls())
func (mock *SensitiveFilterControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockSensitiveFilterControllerMockStart.RLock()
	calls = mock.calls.Start
	lockSensitiveFilterControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *SensitiveFilterControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("SensitiveFilterControllerMock.SyncFunc: method is nil but SensitiveFilterController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockSensitiveFilterControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockSensitiveFilterControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedSensitiveFilterController.SyncCalls())
func (mock *SensitiveFilterControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockSensitiveFilterControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockSensitiveFilterControllerMockSync.RUnlock()
	return calls
}

var (
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockSensitiveFilterInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockSensitiveFilterInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockSensitiveFilterInterfaceMockAddFeatureHandler                sync.RWMutex
	lockSensitiveFilterInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockSensitiveFilterInterfaceMockAddHandler                       sync.RWMutex
	lockSensitiveFilterInterfaceMockAddLifecycle                     sync.RWMutex
	lockSensitiveFilterInterfaceMockController                       sync.RWMutex
	lockSensitiveFilterInterfaceMockCreate                           sync.RWMutex
	lockSensitiveFilterInterfaceMockDelete                           sync.RWMutex
	lockSensitiveFilterInterfaceMockDeleteCollection                 sync.RWMutex
	lockSensitiveFilterInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockSensitiveFilterInterfaceMockGet                              sync.RWMutex
	lockSensitiveFilterInterfaceMockGetNamespaced                    sync.RWMutex
	lockSensitiveFilterInterfaceMockList                             sync.RWMutex
	lockSensitiveFilterInterfaceMockListNamespaced                   sync.RWMutex
	lockSensitiveFilterInterfaceMockObjectClient                     sync.RWMutex
	lockSensitiveFilterInterfaceMockUpdate                           sync.RWMutex
	lockSensitiveFilterInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that SensitiveFilterInterfaceMock does implement SensitiveFilterInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.SensitiveFilterInterface = &SensitiveFilterInterfaceMock{}

// SensitiveFilterInterfaceMock is a mock implementation of SensitiveFilterInterface.
//
//     func TestSomethingThatUsesSensitiveFilterInterface(t *testing.T) {
//
//         // make and configure a mocked SensitiveFilterInterface
//         mockedSensitiveFilterInterface := &SensitiveFilterInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.SensitiveFilterLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.SensitiveFilterLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.SensitiveFilterLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.SensitiveFilterHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.SensitiveFilterLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.SensitiveFilterController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.SensitiveFilter) (*v3.SensitiveFilter, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.SensitiveFilter, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.SensitiveFilter, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.SensitiveFilterList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1.ListOptions) (*v3.SensitiveFilterList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.SensitiveFilter) (*v3.SensitiveFilter, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedSensitiveFilterInterface in code that requires SensitiveFilterInterface
//         // and then make assertions.
//
//     }
type SensitiveFilterInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.SensitiveFilterHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.SensitiveFilterLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.SensitiveFilterHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.SensitiveFilterLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.SensitiveFilterHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.SensitiveFilterLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.SensitiveFilterHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.SensitiveFilterLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.SensitiveFilterController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.SensitiveFilter) (*v3.SensitiveFilter, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.SensitiveFilter, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.SensitiveFilter, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.SensitiveFilterList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1.ListOptions) (*v3.SensitiveFilterList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.SensitiveFilter) (*v3.SensitiveFilter, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.SensitiveFilterHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.SensitiveFilterLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.SensitiveFilterHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.SensitiveFilterLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.SensitiveFilterHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.SensitiveFilterLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.SensitiveFilterHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.SensitiveFilterLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.SensitiveFilter
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.SensitiveFilter
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.SensitiveFilterHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but SensitiveFilterInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.SensitiveFilterHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.SensitiveFilterLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but SensitiveFilterInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.SensitiveFilterLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.SensitiveFilterLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.SensitiveFilterLifecycle
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockSensitiveFilterInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.SensitiveFilterHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddClusterScopedHandlerFunc: method is nil but SensitiveFilterInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.SensitiveFilterHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockSensitiveFilterInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddClusterScopedHandlerCalls())
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockSensitiveFilterInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.SensitiveFilterLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but SensitiveFilterInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.SensitiveFilterLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockSensitiveFilterInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddClusterScopedLifecycleCalls())
func (mock *SensitiveFilterInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.SensitiveFilterLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.SensitiveFilterLifecycle
	}
	lockSensitiveFilterInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockSensitiveFilterInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *SensitiveFilterInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.SensitiveFilterHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddFeatureHandlerFunc: method is nil but SensitiveFilterInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.SensitiveFilterHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockSensitiveFilterInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockSensitiveFilterInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddFeatureHandlerCalls())
func (mock *SensitiveFilterInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockSensitiveFilterInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *SensitiveFilterInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.SensitiveFilterLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddFeatureLifecycleFunc: method is nil but SensitiveFilterInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.SensitiveFilterLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockSensitiveFilterInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockSensitiveFilterInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddFeatureLifecycleCalls())
func (mock *SensitiveFilterInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.SensitiveFilterLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.SensitiveFilterLifecycle
	}
	lockSensitiveFilterInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockSensitiveFilterInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *SensitiveFilterInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.SensitiveFilterHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddHandlerFunc: method is nil but SensitiveFilterInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.SensitiveFilterHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockSensitiveFilterInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockSensitiveFilterInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddHandlerCalls())
func (mock *SensitiveFilterInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.SensitiveFilterHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.SensitiveFilterHandlerFunc
	}
	lockSensitiveFilterInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockSensitiveFilterInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *SensitiveFilterInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.SensitiveFilterLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("SensitiveFilterInterfaceMock.AddLifecycleFunc: method is nil but SensitiveFilterInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.SensitiveFilterLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockSensitiveFilterInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockSensitiveFilterInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedSensitiveFilterInterface.AddLifecycleCalls())
func (mock *SensitiveFilterInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.SensitiveFilterLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.SensitiveFilterLifecycle
	}
	lockSensitiveFilterInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockSensitiveFilterInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *SensitiveFilterInterfaceMock) Controller() v3.SensitiveFilterController {
	if mock.ControllerFunc == nil {
		panic("SensitiveFilterInterfaceMock.ControllerFunc: method is nil but SensitiveFilterInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockSensitiveFilterInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockSensitiveFilterInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedSensitiveFilterInterface.ControllerCalls())
func (mock *SensitiveFilterInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockSensitiveFilterInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockSensitiveFilterInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *SensitiveFilterInterfaceMock) Create(in1 *v3.SensitiveFilter) (*v3.SensitiveFilter, error) {
	if mock.CreateFunc == nil {
		panic("SensitiveFilterInterfaceMock.CreateFunc: method is nil but SensitiveFilterInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.SensitiveFilter
	}{
		In1: in1,
	}
	lockSensitiveFilterInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockSensitiveFilterInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedSensitiveFilterInterface.CreateCalls())
func (mock *SensitiveFilterInterfaceMock) CreateCalls() []struct {
	In1 *v3.SensitiveFilter
} {
	var calls []struct {
		In1 *v3.SensitiveFilter
	}
	lockSensitiveFilterInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockSensitiveFilterInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SensitiveFilterInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("SensitiveFilterInterfaceMock.DeleteFunc: method is nil but SensitiveFilterInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockSensitiveFilterInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockSensitiveFilterInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedSensitiveFilterInterface.DeleteCalls())
func (mock *SensitiveFilterInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockSensitiveFilterInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockSensitiveFilterInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *SensitiveFilterInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("SensitiveFilterInterfaceMock.DeleteCollectionFunc: method is nil but SensitiveFilterInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockSensitiveFilterInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockSensitiveFilterInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedSensitiveFilterInterface.DeleteCollectionCalls())
func (mock *SensitiveFilterInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockSensitiveFilterInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockSensitiveFilterInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *SensitiveFilterInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("SensitiveFilterInterfaceMock.DeleteNamespacedFunc: method is nil but SensitiveFilterInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockSensitiveFilterInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockSensitiveFilterInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedSensitiveFilterInterface.DeleteNamespacedCalls())
func (mock *SensitiveFilterInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockSensitiveFilterInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockSensitiveFilterInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SensitiveFilterInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.SensitiveFilter, error) {
	if mock.GetFunc == nil {
		panic("SensitiveFilterInterfaceMock.GetFunc: method is nil but SensitiveFilterInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockSensitiveFilterInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockSensitiveFilterInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSensitiveFilterInterface.GetCalls())
func (mock *SensitiveFilterInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockSensitiveFilterInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockSensitiveFilterInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *SensitiveFilterInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.SensitiveFilter, error) {
	if mock.GetNamespacedFunc == nil {
		panic("SensitiveFilterInterfaceMock.GetNamespacedFunc: method is nil but SensitiveFilterInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockSensitiveFilterInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockSensitiveFilterInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedSensitiveFilterInterface.GetNamespacedCalls())
func (mock *SensitiveFilterInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockSensitiveFilterInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockSensitiveFilterInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SensitiveFilterInterfaceMock) List(opts v1.ListOptions) (*v3.SensitiveFilterList, error) {
	if mock.ListFunc == nil {
		panic("SensitiveFilterInterfaceMock.ListFunc: method is nil but SensitiveFilterInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockSensitiveFilterInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockSensitiveFilterInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSensitiveFilterInterface.ListCalls())
func (mock *SensitiveFilterInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockSensitiveFilterInterfaceMockList.RLock()
	calls = mock.calls.List
	lockSensitiveFilterInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *SensitiveFilterInterfaceMock) ListNamespaced(namespace string, opts v1.ListOptions) (*v3.SensitiveFilterList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("SensitiveFilterInterfaceMock.ListNamespacedFunc: method is nil but SensitiveFilterInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockSensitiveFilterInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockSensitiveFilterInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedSensitiveFilterInterface.ListNamespacedCalls())
func (mock *SensitiveFilterInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockSensitiveFilterInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockSensitiveFilterInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *SensitiveFilterInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("SensitiveFilterInterfaceMock.ObjectClientFunc: method is nil but SensitiveFilterInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockSensitiveFilterInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockSensitiveFilterInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedSensitiveFilterInterface.ObjectClientCalls())
func (mock *SensitiveFilterInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockSensitiveFilterInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockSensitiveFilterInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SensitiveFilterInterfaceMock) Update(in1 *v3.SensitiveFilter) (*v3.SensitiveFilter, error) {
	if mock.UpdateFunc == nil {
		panic("SensitiveFilterInterfaceMock.UpdateFunc: method is nil but SensitiveFilterInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.SensitiveFilter
	}{
		In1: in1,
	}
	lockSensitiveFilterInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockSensitiveFilterInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSensitiveFilterInterface.UpdateCalls())
func (mock *SensitiveFilterInterfaceMock) UpdateCalls() []struct {
	In1 *v3.SensitiveFilter
} {
	var calls []struct {
		In1 *v3.SensitiveFilter
	}
	lockSensitiveFilterInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockSensitiveFilterInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *SensitiveFilterInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("SensitiveFilterInterfaceMock.WatchFunc: method is nil but SensitiveFilterInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockSensitiveFilterInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockSensitiveFilterInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedSensitiveFilterInterface.WatchCalls())
func (mock *SensitiveFilterInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockSensitiveFilterInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockSensitiveFilterInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockSensitiveFiltersGetterMockSensitiveFilters sync.RWMutex
)

// Ensure, that SensitiveFiltersGetterMock does implement SensitiveFiltersGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.SensitiveFiltersGetter = &SensitiveFiltersGetterMock{}

// SensitiveFiltersGetterMock is a mock implementation of SensitiveFiltersGetter.
//
//     func TestSomethingThatUsesSensitiveFiltersGetter(t *testing.T) {
//
//         // make and configure a mocked SensitiveFiltersGetter
//         mockedSensitiveFiltersGetter := &SensitiveFiltersGetterMock{
//             SensitiveFiltersFunc: func(namespace string) v3.SensitiveFilterInterface {
// 	               panic("mock out the SensitiveFilters method")
//             },
//         }
//
//         // use mockedSensitiveFiltersGetter in code that requires SensitiveFiltersGetter
//         // and then make assertions.
//
//     }
type SensitiveFiltersGetterMock struct {
	// SensitiveFiltersFunc mocks the SensitiveFilters method.
	SensitiveFiltersFunc func(namespace string) v3.SensitiveFilterInterface

	// calls tracks calls to the methods.
	calls struct {
		// SensitiveFilters holds details about calls to the SensitiveFilters method.
		SensitiveFilters []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// SensitiveFilters calls SensitiveFiltersFunc.
func (mock *SensitiveFiltersGetterMock) SensitiveFilters(namespace string) v3.SensitiveFilterInterface {
	if mock.SensitiveFiltersFunc == nil {
		panic("SensitiveFiltersGetterMock.SensitiveFiltersFunc: method is nil but SensitiveFiltersGetter.SensitiveFilters was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockSensitiveFiltersGetterMockSensitiveFilters.Lock()
	mock.calls.SensitiveFilters = append(mock.calls.SensitiveFilters, callInfo)
	lockSensitiveFiltersGetterMockSensitiveFilters.Unlock()
	return mock.SensitiveFiltersFunc(namespace)
}

// SensitiveFiltersCalls gets all the calls that were made to SensitiveFilters.
// Check the length with:
//     len(mockedSensitiveFiltersGetter.SensitiveFiltersCalls())
func (mock *SensitiveFiltersGetterMock) SensitiveFiltersCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockSensitiveFiltersGetterMockSensitiveFilters.RLock()
	calls = mock.calls.SensitiveFilters
	lockSensitiveFiltersGetterMockSensitiveFilters.RUnlock()
	return calls
}
